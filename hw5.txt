CSCI 201 [1,3] Fall 2002

Programming Assignment 5

Due Tuesday, Nov 5, 2002

Objective:

This assignment is designed to provide you with experience using selection
statements and modifying an existing program.
You will modify the source code from your previous program, hw4, in which
you approximated sine and cosine.
No loops, or user defined data structures are
necessary to solve this problem.

Problem:

Modify your hw4 program to:
* accept negative angles;
* identify quadrants;
* reduce 2nd-4th quadrant computations to equivalent first quadrant
    computations;
* accept one of several angle reduction factors.
* The program behavior, as viewed by the user, for default values, 
    should improve or at least not get worse.


Specifications:

* Document your program in detail!!!!!!!!!!!!!!!!!!!!!!

!!! The order of the following procedures must be maintained

[if you use functions for the following it will unclutter your logic]

* include <stdlib.h>

* Ask the user for and read an integer angle reduction factor (default = 4)
  ranging between 1 and 6 inclusive.
** if the angle reduction factor (ARF) is outside that range, print a
   complaining message to the user and call exit().

// Handle negative angles
* If the input angle is negative,
**   take its absolute value
**   reduce it to the unit circle ( % 360)
**   subtract it from 360

// Handle special axis angles
* if the angle % 90 == 0
**   if angle == 0
        sin = 0 ; cos = 1;
     else if angle == 90
        sin = 1 ; cos = 0;
     else if angle == 180
        sin = 0 ; cos = -1;
     else if angle == 270
        sin = -1 ; cos = 0;
**   print values and call exit()

* Identify and print quadrant with identifying text // See Figure 5-28 p.215

// establish transform factors to allow tranformation of quadrant II - IV
// angles to quadrant I
// e.g. final_sine = sine_Xform_factor * sine
//      final_cosine = cosine_Xform_factor * cosine
int sine_Xform_factor = 1    // intializing factors
int cosine_Xform_factor = 1
* if not quadrant I
**   if quadrant II
        cosine_Xform_factor *= -1;
        angle = 180 - angle;
     else if quadrant III
        sine_Xform_factor *= -1;
        cosine_Xform_factor *= -1;
        angle = angle - 180;
     else if quadrant IV
        sine_Xform_factor *= -1;
        angle = 360 - angle;

// Handle special angles
* if angle = 30
     sine   = 1.0/2;
     cosine = sqrt(3)/2;
  else if angle = 45
     sine   = sqrt(2)/2;
     cosine = sine;
  else if angle = 60
     cosine = 1.0/2;
     sine   = sqrt(3)/2;
// {remember to use the transform factor after this}
**   print values and call exit()

* Apply angle reduction factor

* Compute 5 term expansion 

// Use a case statement for the following formulae to restore the angle:
* switch( angle_reduction_factor )
      case 2: sin2x = 2 * sinx * cosx;
              cos2x = 2 * (cosx)^2 - 1;
      case 3: sin3x = 3 * sinx - 4 * (sinx)^3; // = sinx * (3 - 4 * (sinx)^2)
              cos3x = 4 * (cosx)^3 - 3 * cosx; // = cosx * (4 * (cosx)^2 - 3)
      case 4: sin4x = 8 * sinx * (cosx)^3 - 4 * cosx * sinx;
                 // = 4 * sinx * cosx * ( 2 * (cosx)^2 - 1)
              cos4x = 8 * (cosx)^4 - 8 * (cosx)^2 + 1;
                 // = 8 * (cosx)^2 * ( (cosx)^2 - 1) + 1
      case 5: sin5x = 5 * sinx - 20 * (sinx)^3 + 16 * (sinx)^5
              cos5x = 16 * (cosx)^5 - 20 * (cosx)^3 + 5 * cosx;
      case 6: sin6x = 32 * (cosx)^5 *sinx - 32*(cosx)^3 *sinx + 6*cosx *sinx;
                 // = sinx * cosx * (32 * (cosx)^2 * ((cosx)^2 -1) + 6)
              cos6x = 32 * (cosx)^6 - 48 * (cosx)^4 + 18 * (cosx)^2 - 1;
	         // = (cosx)^2 * ((cosx)^2 * (32 * (cosx)^2 - 48) + 18) - 1
      default: <complain to user and call exit()>


SUBMIT:

* A listing of your source.

* A copy {using the Unix [script] command} of your programs output for the
  following data values for an angle reduction factor of [1]:
  359, 719, -719, 1, -720, -120, 225
  Using an angle reduction factor of [2,3,4,5,6]: 85


  
