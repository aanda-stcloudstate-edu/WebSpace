Sessions forUNIX and Shell ProgrammingA TextbookBehrouz A. Forouzan and Richard F. GilbergBrooks/Cole Publishing( ISBN 0 534-95159-7)COPYRIGHT (c) 2003 the Wadsworth Group. Brooks/Cole is an imprint of the Wadsworth Group, a division of Thomson Learning, Inc. Thomson Learning(tm) is a trademark used herein under license.============================================================Chapter 12 ------------------------------------------------------------Session 12.1 Example 1 Execution$ awk -f total.awk total.dat# Begin ProcessingBEGIN {print "Print Totals"}# Body Processing{total = $1 + $2 + $3}{print $1 " + " $2 " + " $3 " = "total}# End ProcessingEND {print "End Totals"}Input: 22  78  44 66  31  70 52  30  44 88  31  66 Output:Print Totals22 + 78 + 44 = 14466 + 31 + 70 = 16752 + 30 + 44 = 12688 + 31 + 66 = 185End Totals------------------------------------------------------------Session 12.2 Begin and End PatternsBEGIN{ FS  = "\t"  OFS = "\t" } # end BEGIN...END{ print("Total Sales:", totalSales)} # end END ------------------------------------------------------------Session 12.3 Use of Regular Expressions$0 ~ /^A.*B$/             # Record must begin with 'A' and end with 'B'$3 !~ /^ /                # Third field must not start with a space $4 !~ /bird/              # Fourth field must not contain "bird"------------------------------------------------------------Session 12.4 Printing Lines with Regular Expressions$ awk "/bird/ {print}" TheRavenOutput:Then this ebony bird beguiling my sad fancy into smiling,Ever yet was blessed with seeing bird above his chamber door--Then the bird said "Nevermore.""Prophet!", said I, "thing of evil-profit still, if bird or devil!--"Prophet!", said I, "thing of evil-profit still, if bird or devil!--"Be that word our sign of parting, bird or fiend!" I shrieked, upstarting--------------------------------------------------------------Session 12.5 Extract and Print Computers Sales$ awk '$2 == "computers" {print}' sales.datInput: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:1       computers       91612       computers       12321------------------------------------------------------------Session 12.6 Extract and Print Computers Sales$ awk '$2 == "computers" && $3 > 10000 {print}' sales.datInput: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       1232 2       supplies        2242 2       textbooks       15462 Output:2       computers       12321------------------------------------------------------------Session 12.7 Print Range$ awk 'NR == 8, NR == 13 {print NR, $0}' TheRavenOutput:8 Ah, distinctly I remember it was in the bleak December;9 And each separate dying ember wrought its ghost upon the floor.10 Eagerly I wished the morrow; -- vainly I had sought to borrow11 From my books surcease of sorrow -- sorrow for the lost Lenore12 For the rare and radiant maiden whom the angels name Lenore13 Nameless here for evermore.------------------------------------------------------------Session 12.8 Print Selected Subranges$ awk 'NR % 10 == 5, NR % 10 == 7 {print NR, $0}' TheRaven | head -6Output:5 "'Tis some visitor," I muttered, "tapping at my chamber door6 Only this and nothing more."715 And the silken, sad, uncertain rustling of each purple curtain16 Thrilled me--filled me with fantastic terrors never felt before;17 So that now, to still the beating of my heart, I stood repeating------------------------------------------------------------Session 12.9 Add and Print Sales Total$ awk -f totalSales.awk sales1.dat# total Sales scriptBEGIN {total = 0}      {total += $3}END   {print "Total Sales", total}Input: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:Total Sales 66891------------------------------------------------------------Session 12.10 Print Fields$ awk '{print}' sales2.datOutput:1       clothing        31411       computers       91611       software        31411       supplies        21311       textbooks       213121       sporting        02       clothing        32522       computers       123212       software        32522       supplies        22422       textbooks       224522       sporting        23453       clothing        33633       computers       134313       software        33633       supplies        23533       textbooks       235533       sporting        4554------------------------------------------------------------Session 12.11 Print Selected Fields $ awk '{print $1, $2, $3}' sales2.dat | head -5Output:1 clothing 31411 computers 91611 software 31411 supplies 21311 textbooks 21312------------------------------------------------------------Session 12.12 Print Columns $ awk 'BEGIN {OFS = "\t"}; {print $1, $2, $3}' sales2.dat | head -5Output:1       clothing        31411       computers       91611       software        31411       supplies        21311       textbooks       21312------------------------------------------------------------Session 12.13 Formatting Output $ awk '{printf("%2d %-12s $%9.2f\n", $1, $2, $3)}' sales2.dat | head -5Output: 1 clothing     $  3141.00 1 computers    $  9161.00 1 software     $  3141.00 1 supplies     $  2131.00 1 textbooks    $ 21312.00------------------------------------------------------------Session 12.14 sprintf Example$ awk -f sprintf.awk sales2.dat# sprintf.awk script# Demonstrate sprintf commandNR == 1 {         str = sprintf("%2d %-12s $%9.2f\n", $1, $2, $3)         len = length(str)         print len " " str        }Input: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:27  1 clothing     $  3141.00------------------------------------------------------------Session 12.15 Avoiding Dangling else Statements{  if (expression1)    {     if (expression2)         action1    } # end of nested if else    action2} # end of outer if------------------------------------------------------------Session 12.16 Print Computer Department Averages$ awk -f compSalesAvg.awk sales1.dat# compSalesAvg.awk{ if ($2 == "computers")    {     compSales += $3     numMons++    } # if computers true} # end if END {      if (compSales / numMons > 10000)          print "Good sales in computers: $", compSales      else          print "Time for a pep-talk: $", compSales     } # ENDInput: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:Good sales in computers: $ 21482------------------------------------------------------------Session 12.17 Skip Zero Balances in Computer Sales$ awk -f averageSales.awk sales1.dat# averageSales script $3 == 0 {next} # Have non-zero sale {  total += $3  count++ } # Non-zero sales END {avrg = total / count      printf("Total sales    : $%9.2f\n", total)      printf("Number of sales: %7d\n",    count)      printf("Average sales  : $%9.2f\n", avrg)     } # ENDInput: 1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:Total sales    : $66891.00Number of sales:      7Average sales  : $ 9555.86------------------------------------------------------------Session 12.18 Exchange Lines in a File (awk)$ awk -f exchange.awk 5lines.dat# exchange.awk script# exchanges lines 2 by 2{ if ((getline evenLine) == 1)    {     print evenLine     print $0    } # if getline else     print $0}Input: line 1 line 2 line 3 line 4 line 5 Output:line 2 line 1line 4line 3line 5------------------------------------------------------------Session 12.19 Using exit to Guard against Divide by Zero$ awk -f salesZeroDiv.awk zeroSales.dat# salesZeroDiv.awk script# with compare complemented for test$3 == 0 {next}{total += $3 print $1 $2 $3 count++} # Not zero salesEND    {        if (count == 0)           {             printf("No sales to average\n")             exit 100           }  # end if        avrg = total / count        printf("Total sales    : $%9.2f\n", total)        printf("Number of sales: %7d\n",    count)        printf("Average sales  : $%9.2f\n", avrg)       }  # end END blockInput: 1       clothing        0 1       computers       0 1       textbooks       0 Output:No sales to average------------------------------------------------------------Session 12.20 Calculate Student Averages (while Loop)$ awk -f stuWhile.awk students.dat# stuWhile.awk script{ total = 0 count = 0 i     = 2 while (i <= NF)     {      total += $i      count++      i++     } # while# test for zero divide if (count > 0)    {     avrg = total/count     print ($1, avrg)    } # zero divide test} # bodyInput: 1234    87      83      91      89 2345    71      78      83      81 3456    93      97      89      91 4567    81      82      79      89 5678    78      86      81      79 Output:1234 87.52345 78.253456 92.54567 82.755678 81------------------------------------------------------------Session 12.21 Calculate Student Averages (for Loop)# for loop example{ total = 0 count = 0 for (i = 2; i <= NF; i++)    {     total += $i     count++    } # for} # end of student scores# test for zero dividecount > 0 {           avrg = total/count           print ($1, avrg)          } # zero divide test# end ------------------------------------------------------------Session 12.22 Calculate Student Averages (do-while Loop)# do while example{ total = 0 count = 0 i     = 2} # initialization NF > 1 {         do            {             total += $i             count++             i++            } # do body         while (i <= NF)         avrg = total/count         print ($1, avrg)        } # NF > 1# end script------------------------------------------------------------Session 12.23 Print Student File Backward$ awk -f listStuBackward.awk students.dat# listStuBackward.awk{lines [NR] = $0}END {     for (i = NR; i > 0; i--)          print lines[i]    } # end ENDInput 1234    87      83      91      89 2345    71      78      83      81 3456    93      97      89      91 4567    81      82      79      89 5678    78      86      81      79 Output5678    78      86      81      794567    81      82      79      893456    93      97      89      912345    71      78      83      811234    87      83      91      89------------------------------------------------------------Session 12.24 Sales by Department$ awk -f salesDeptLoop.awk sales1.dat# salesDeptLoop.awk scriptBEGIN   {OFS = "\t"}{deptSales [$2] += $3}END     {for (item in deptSales)             {               print item, ":",  deptSales[item]               totalSales +=     deptSales[item]             } # for          print "Total Sales", ":", totalSales} # ENDInput:1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:computers       :       21482supplies        :       2242textbooks       :       36774clothing        :       6393Total Sales     :       66891------------------------------------------------------------Session 12.25 Count Words in "The Raven"$ awk -f countWords.awk countWords.dat# countWords.awk# This script eliminates the duplicate words# from a file of words and then prints them# with their count.# First create associative array of counts {words[$0]++}# Now print resultsEND{    for (wrd in words)        print (words[wrd], "\t", wrd)   } # ENDInput: Once upon ...nothing more Output:2        my2        tapping...1        there3        a------------------------------------------------------------Session 12.26 Delete Supplies$ awk -f salesDltEntry.awk sales.dat# salesDltEntry.awkBEGIN   {OFS = "\t"}{deptSales [$2] += $3}END     {print "Deleting \"supplies\" index entry"         delete deptSales["supplies"]         for (item in deptSales)             { print item, ":", deptSales[item]               totalSales +=     deptSales[item]             } # for          print "Total Sales", ":", totalSales        } # ENDInput:1       clothing        3141 1       computers       9161 1       textbooks       21312 2       clothing        3252 2       computers       12321 2       supplies        2242 2       textbooks       15462 Output:Deleting "supplies" index entrycomputers       :       21482textbooks       :       36774clothing        :       6393Total Sales     :       64649------------------------------------------------------------Session 12.27 String Length$ awk -f countChar.awk TheRavenV1# countChar.awk# This script counts the number of characters in each line.# At the end, it prints the total characters in the file.{ print len = length($0), "\t", $0 cntChar += len}END {print cntChar " Total characters in", FILENAME}Output:62     Once upon a midnight dreary, while I pondered, weak and weary,55     Over many a quaint and curious volume of forgotten lore62     While I nodded, nearly napping, suddenly there came a tapping,57     As of someone gently rapping, rapping at my chamber door.60     "'Tis some visitor," I muttered, "tapping at my chamber door28     Only this and nothing more."35     Perched, and sat, and nothing more.359 Total characters in TheRavenV1------------------------------------------------------------Session 12.28 String Index$ awk -f stringIndex.awk# stringIndex.awk BEGIN {print "Key MISSISSIPPI--At End key ^d"}{locn = index ($0, "IS") print "'IS'   is found at...", locn, " in ", $0 locn = index ($0, "SI") print "'SI'   is found at...", locn, " in ", $0 locn = index ($0, "SIS") print "'SIS'  is found at...", locn, " in ", $0 locn = index ($0, "IPPI") print "'IPPI' is found at...", locn, " in ", $0 locn = index ($0, "MO") print "'MO'   is found at...", locn, " in ", $0}Script Execution:Key MISSISSIPPI--At End key ^dMISSISSIPPI'IS'   is found at... 2  in  MISSISSIPPI'SI'   is found at... 4  in  MISSISSIPPI'SIS'  is found at... 4  in  MISSISSIPPI'IPPI' is found at... 8  in  MISSISSIPPI'MO'   is found at... 0  in  MISSISSIPPI^d------------------------------------------------------------Session 12.29 String Substring$ awk -f stringSubstr.awk# stringSubstr.awk BEGIN {print "Key MISSISSIPPI--At End Key ^d"}{ locn = index ($0, "SIS") # print substr return value print "substr ($0, locn, 3) contains: ", substr ($0, locn, 3) # store return value and then print stringVar = substr ($0, locn) print "Variable contains            : ", stringVar} # end stringSubstrScript Execution:Key MISSISSIPPI--At End Key ^dMISSISSIPPIsubstr ($0, locn, 3) contains:  SISVariable contains            :  SISSIPPI------------------------------------------------------------Session 12.30 Break Up Long Lines$ awk -f stringLine40.awk TheRavenV1# stringLine40.awk{len = length($0) if (len <= 40)     print $0 else   { for (i = 1; len > 40; i += 40)         { print substr ($0, i, 40)           len -= 40         } # for     print substr ($0, i)   } # else} # stringLine40.awkOutput:Once upon a midnight dreary, while I pondered, weak and weary,Over many a quaint and curious volume of forgotten loreWhile I nodded, nearly napping, suddenly there came a tapping,As of someone gently rapping, rapping at my chamber door."'Tis some visitor," I muttered, "tapping at my chamber doorOnly this and nothing more."Perched, and sat, and nothing more.------------------------------------------------------------Session 12.31 Phone List$ awk -f phoneList.awk phoneBook.dat# phoneList.awkBEGIN {FS = "\t"}      { split($0, namePhone)        split(namePhone[1], lastFirst, ",")        print namePhone[2], lastFirst[2], lastFirst[1]      }Input: Black, Mary        555-0583 Devaux, Brian      555-3802 Forouzan, Behrouz  555-0902 Gilberg, Dick      555-8616 Lam, Huong         555-6780 Trapp, Amanda      555-1212 Walljasper, Chris  555-0238 Output:555-0583  Mary Black555-3802  Brian Devaux555-0902  Behrouz Forouzan555-8616  Dick Gilberg555-6780  Huong Lam555-1212  Amanda Trapp555-0238  Chris Walljasper------------------------------------------------------------Session 12.32 Substitution $ awk -f stringSub.awk TheRaven | head -5# stringSub.awk {success = sub (/bird/, "RAVEN", $0)} {if (success > 0)      # if a substitution was made      print NR, $0 } # if# end scriptOutput:49 Then this ebony RAVEN beguiling my sad fancy into smiling,59 Ever yet was blessed with seeing RAVEN above his chamber door--68 Then the RAVEN said "Nevermore."91 "Prophet", said I, "thing of evil-profit still if RAVEN or devil!--98 "Prophet", said I, "thing of evil-profit still if RAVEN or devil!--------------------------------------------------------------Session 12.33 Substitution for Replacement $ awk -f stringSub2.awk TheRaven | head -5# stringSub2.awk {success = sub (/bird/, "\"&\"")  if (success > 0)      print NR, $0 } # end scriptOutput:49 Then this ebony "bird" beguiling my sad fancy into smiling,59 Ever yet was blessed with seeing "bird" above his chamber door--68 Then the "bird" said "Nevermore."91 "Prophet", said I, "thing of evil-profit still if "bird" or devil!--98 "Prophet", said I, "thing of evil-profit still if "bird" or devil!--------------------------------------------------------------Session 12.34 Global Substitution$ awk -f stringGSub.awk TheRaven# stringGSub.awk{gsub (/tapping/, "POUNDING", $0)}{ if (index ($0, "POUNDING"))      print NR, $0} # if# end scriptOutput:3 While I nodded, nearly napping, suddenly there came a POUNDING,5 "'Tis some visitor," I muttered, "POUNDING at my chamber door24 And so faintly you came POUNDING, POUNDING at my chamber door,36 Soon again I heard a POUNDING somewhat louder than before.------------------------------------------------------------Session 12.35 String Match$ awk -f stringMatch.awk TheRaven | head -5# stringMatch.awk{if (match ($0, /^.*,/) > 0)    print NR, substr($0, RSTART, RLENGTH)} # end scriptOutput:1 Once upon a midnight dreary, while I pondered, weak and weary,3 While I nodded, nearly napping, suddenly there came a tapping,4 As of someone gently rapping,5 "'Tis some visitor," I muttered,8 Ah,------------------------------------------------------------Session 12.36 Correct Formatting of UNIX$ awk -f formatUnix.awk formatUnix.dat# formatUnix.awk# This script reformats all spellings of UNIX to uppercase.{ match ($0 , /[Uu]nix/) upr = toupper (substr($0, RSTART, RLENGTH)) gsub (/[Uu]nix/, upr) print $0}Input:This is the first line of the formatUnix file.Unix is a great system.Many universities require UNIX.The new Mac OS/X uses a "unix" kernel.Unix yesterday, unix today, UNIX tomorrow.This is the last line of the file.Output:This is the first line of the formatUNIX file.UNIX is a great system.Many universities require UNIX.The new Mac OS/X uses a "UNIX" kernel.UNIX yesterday, UNIX today, UNIX tomorrow.This is the last line of the file.------------------------------------------------------------Session 12.37 User-Defined Functions $ awk -f larger.awk larger.dat# larger.awk{ print larger($1, $2), " > ", smaller($1, $2)}# ======== larger =========function larger(m, n){ return m > n ? m : n} # larger# ======== smaller =========function smaller(m, n){ return m < n ? m : n} # smaller# end scriptInput: 123     321 Juan    Tuan Mary    June -123    123 Output:321 > 123Tuan > JuanMary > June123 > -123------------------------------------------------------------Session 12.38 Getting the Date $ awk -f date.awk# date.awkBEGIN {       "date" | getline       print ($1, $4)    # Day of Week & time of day      } # end of BEGINOutput:Sat 16:07:14------------------------------------------------------------Session 12.39 Insert Date into File $ awk -f readFile.awk readLtrHead.dat readFile.dat readSignature.dat# Script Name: readFile.awk# This script inserts a letter-head and signature# block in a file.BEGIN {       "date" | getline       today = sprintf("%s. %s, %s",$2, $3, $6) # mmm. dd, yyyy      } # end BEGIN{     # Process header, letter, and signature files      gsub (/DATE/,today)      print($0)}     # End of body sectionInput: readLtrHead.dat             UNIX Consultants Inc                 P.O. Box 555           Silicon Valley, CA 94555  readFile.dat DATE  John Doe Smart.com Inc. 1234 Success Way Userville, CA 95555 . . . readSignature.dat Sincerely yours,   Richard F. Gilberg UNIX Consultants Inc Output:             UNIX Consultants Inc                  P.O. Box 555             Silicon Valley, CA 94555 Mar. 1, 2001John DoeSmart.com Inc.1234 Success WayUserville, CA 95555...Sincerely yours,Richard F. GilbergUNIX Consultants Inc------------------------------------------------------------Session 12.40 Creating a who File $ awk -f who.awk# who.awk script# creates a dated report of who was on the systemBEGIN {       "date" | getline       print ($1, $4)    # Day of Week & time of day       while ("who" | getline)          print($1, $2)      } # end of BEGINOutput:Sat 21:32:22nbx50783 ttyq2kng47542 ttyq16gilberg ttyq7ttl38940 ttyq8forouzan ttyq9eo058879 ttyq11------------------------------------------------------------Session 12.41 Execute a Shell Command$ awk -f sysCopy.awk# sysCopy.awk# copies file as backup (.bak)BEGIN {       if (system ("cp sysCopy.dat sysCopy.bak") != 0)          {           print ("Error copying sysCopy.dat")           exit          } # if cp       print "sysCopy.dat copied"      } # BEGIN & scriptOutput (Successful):sysCopy.dat copiedOutput (Unsuccessful):sysCopy.dat - No such file or directoryError copying sysCopy.dat------------------------------------------------------------Session 12.42 Phone List$ wk -f phones.awk phones.dat# phones.awk scriptBEGIN {FS = "\n"; RS = ""}# Body Section{print ($1, "\t", $NF)}Input: John Eagle 2123 Old Wagon Road Big Lake, WY 55545 (123) 555-5523Melissa Hiakawa1523 17th AvenueSan Francisco, CA 95123(455) 555-1837Amanda Trapp9741 Oak CourtSilicon Valley, CA 95222(408) 555-7147Output:John Eagle          (123) 555-5523Melissa Hiakawa     (455) 555-1837Amanda Trapp        (408) 555-7147------------------------------------------------------------Session 12.43 Count Lines and Words in a File $ awk -f countWdsLns.awk TheRavenV1# countWdsLns.awk scriptBEGIN {print "Record\tWords"}# Body Section{ print (NR, ": \t", NF, $0) words += NF} # Body SectionEND   {       print ("\nTotals:")       print ("  Words:\t" words)       print ("  Lines:\t" NR)      } # End ScriptOutput:Record  Words1:    11 Once upon a midnight dreary, while I pondered, weak and weary,2:    10 Over many a quaint and curious volume of forgotten lore3:    10 While I nodded, nearly napping, suddenly there came a tapping,4:    10 As of someone gently rapping, rapping at my chamber door.5:    10 "'Tis some visitor," I muttered, "tapping at my chamber door6:    5 Only this and nothing more."7:    6 Perched, and sat, and nothing more.Totals:  Words:        62  Lines:        7------------------------------------------------------------Session 12.44 Print Line After Blank Line $ awk -f blankLn.awk TheRaven | head -5# blankLn.awk script flag == 1 {print $0; flag = 0} $0 ~/^$/ {flag = 1}Output: (First five lines)Ah, distinctly I remember it was in the bleak December;And the silken, sad, uncertain rustling of each purple curtainPresently my soul grew stronger; hesitating then no longer,Deep into that darkness peering, long I stood there wondering, fearing,Back into the chamber turning, all my soul within me burning,------------------------------------------------------------Session 12.45 Print Line Before Blank Line $ awk -f afterBlkLn.awk TheRaven | head -5# afterBlkLn.awk script $0 ~/^$/ && NR != 1 {print line}  # Print line                     {line = $0}   # Save  lineOutput: (First five lines)Only this and nothing more."Nameless here for evermore.This it is and nothing more."Darkness there and nothing more.Merely this and nothing more.------------------------------------------------------------Session 12.46 Merge Files $ awk -f merge.awk# merge.awk script# merge lines from two filesBEGIN {       while ((getline first  < "5lines.dat") > 0\           && (getline second < "7lines.dat") > 0)             {              print first              print second             } # while       while ((getline first < "5lines.dat") > 0)             { print first }       while ((getline second < "7lines.dat") > 0)             { print second }      } # BEGIN -- End Of ScriptInput: 5lines.dat line 1 line 2 line 3 line 4 line 5 Input: 7lines.datline Aline Bline Cline Dline Eline Fline GOutput:line 1line Aline 2line Bline 3line Cline 4line Dline 5line Eline Fline G------------------------------------------------------------Session 12.47 Simulate grep Expression That Matches Line grep$ grep '^[A-Z].*[A-Z]$' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:NopqurstuvwxYUVwxyz AbcdeFawk$ awk '$0 ~/^[A-Z].*[A-Z]$/ {print $0}' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:abcdefghijklm	NopqurstuvwxYNopqurstuvwxY	UVwxyz AbcdeF------------------------------------------------------------Session 12.48  Using grep or awk Example 2grep$ grep -v '^[A-Z].*[A-Z]$' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:abcdefghijklmZ abcdefghijklMnopqrstursTawk$ awk  '$0 !~ /^[A-Z].*[A-Z]$/ {print $0}' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:abcdefghijklmZ abcdefghijklMnopqrstursT------------------------------------------------------------Session 12.49 Using sed and awk to Print Line Numbers sed$ sed '=' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:1abcdefghijklm2NopqurstuvwxY3Z abcdefghijk4lMnopqrstursT5UVwxyz AbcdeFawk$ awk '{print NR ; print $0}' file1.datInput: abcdefghijklm NopqurstuvwxY Z abcdefghijk lMnopqrstursT UVwxyz AbcdeF Output:1abcdefghijklm2NopqurstuvwxY3Z abcdefghijk4lMnopqrstursT5UVwxyz AbcdeF------------------------------------------------------------Session 12.50 Insert Text with sed and awk sed$ sed -f addLines.sed 5lines.dat3i\This is text\to be addedInput:line 1 line 2 line 3 line 4 line 5 Output:line 1line 2This is textto be addedline 3line 4line 5awk$ awk -f addLines.awk 5lines.dat# addLines.awkNR != 3 {print $0}NR == 3 {print "This is text"; print "to be added" ; print $0}Input: line 1 line 2 line 3 line 4 line 5 Output:line 1line 2This is textto be addedline 3line 4line 5------------------------------------------------------------Session 12.51 Delete Text with sed and awksed$ sed '2,4d' 5lines.datInput: line 1 line 2 line 3 line 4 line 5 Output:line 1line 5awk$ awk 'NR < 2 || NR > 4 { print $0}' 5lines.datInput: line 1 line 2 line 3 line 4 line 5 Output:line 1line 5------------------------------------------------------------Session 12.52 Substitute Text with sed and awk sed$ sed '3s/line/order/' 5lines.datInput: line 1 line 2 line 3 line 4 line 5 Output:line 1line 2order 3line 4line 5awk$ awk -f sub.awk 5lines.dat# sub.awk script{ if (NR == 3)    sub (/line/, "order") print $0}Input: line 1 line 2 line 3 line 4 line 5 Output:line 1line 2order 3line 4line 5------------------------------------------------------------Session 12.53 Quit in sed and Exit in awk sed$ sed '4q' 7lines.datInput: line A line B line C line D line E line F line G Output:line Aline Bline Cline Dawk$ awk '{ if (NR > 4) exit; else print $0}' 7lines.datInput: line A line B line C line D line E line F line G Output:line Aline Bline Cline D