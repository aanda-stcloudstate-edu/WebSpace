Sessions forUNIX and Shell ProgrammingA TextbookBehrouz A. Forouzan and Richard F. GilbergBrooks/Cole Publishing( ISBN 0 534-95159-7)COPYRIGHT (c) 2003 the Wadsworth Group. Brooks/Cole is an imprint of the Wadsworth Group, a division of Thomson Learning, Inc. Thomson Learning(tm) is a trademark used herein under license.============================================================Chapter 14 ------------------------------------------------------------Session 14.1. Adding to a String$ count=5$ count=$count+2$ print $count5+2------------------------------------------------------------Session 14.2 Mathematical Expression Operators $ (( num = 15 * 6 ))$ print $num90$ (( num = 15 / 6 ))$ print $num2$ operand1=15$ (( num = operand1 % 6 ))         $ print $num3$ operand2=6$ (( num = 15 + operand2 ))         $ print $num21$ (( num = operand1 - operand2 ))     $ print $num9------------------------------------------------------------Session 14.3 Demonstrate Use of Relational Expression Operators# Numeric Expression Compares	# String Expression Compares$ a=5	$ s="ab"$ (( a == 5 ))	$ [[ $s = "ab " ]]$ print $?	$ print $?0                     # true	0                     # true$ (( a != 5 ))	$ [[ $s != "ab" ]]$ print $?	$ print $?1                     # false	1                     # false$ (( a > 4 ))	$ print $?	0                     # true	$ (( a >= 6 ))	$ print $?	1                     # false	$ (( a < 6 ))	$ print $?	0                     # true	$ (( a <= 4 ))	$ print $?	1                     # false		$ [[ -n $s ]]           	$ print $?	0                     # true	$ [[ -z "" ]]         # null string	$ print $?	0                     # true------------------------------------------------------------Session 14.4 Test If File Exists $ ls -l file1 file2-rw-r--r--    1 gilberg  staff        100 Mar 13 16:14 file1-rw-r--r--    1 gilberg  staff       4405 Feb  3 12:11 file2$ [[ -s file1 ]]$ print $?0                                      # true$ [[ file1 -ot file2 ]]$ print $?1                                     # false------------------------------------------------------------Session 14.5 Logical Operators $ [[ 7 > 5 && 6 > 5 ]]$ print $?0                                         # true$ [[ 7 > 5 && 6 > 7 ]] $ print $?1                                         # false$ [[ 7 == 5 || 6 < 7 ]]$ print $?0                                         # true $ [[ 5 > 7 || 6 > 7 ]]$ print $?1                                         # false$ [[ "a" != "b" && 4 > 3 ]]$ print $?0                                         # true$ [[ ! "a" = "b" ]]$ print $?0                                         # true$ [[ ! 5 > 3 ]]$ print $?1                                         # false------------------------------------------------------------Script 14.1 Recommended Minimum Documentation #!/bin/ksh                   # Korn shell path name#  Script: doc.scr#  This script demonstrates our recommended minimum documentation.# Commands start here------------------------------------------------------------Script 14.2. The dir.scr Script#!/bin/ksh                      # The Script File#  Script: dir.scr#  A simple scriptls -l | more$ dir.scr                      # Command ExecutionOutput:total 8-rw-r--r--    1 gilberg  staff        0 Jun  5 16:56 5-rw-r--r--    1 gilberg  staff        0 Jun  6 14:10 =-rw-------    1 gilberg  staff     5782 Jun  4 12:55 TheRaven-rw-r--r--    1 gilberg  staff      330 Jun  4 13:04 TheRavenV1-rwxr--r--    1 gilberg  staff       13 Jun 11 13:52 dirScript-rw-r--r--    1 gilberg  staff        0 Jun 10 11:26 echo-rw-r--r--    1 gilberg  staff      100 Jun  3 09:00 file1-rw-r--r--    1 gilberg  staff      100 Jun  3 08:56 file2------------------------------------------------------------Script 14.3 The who.scr Script #!/bin/ksh #  Script: who.scr#  Displays users currently logged in.who | awk '{print $1}'$ who.scrOutput:st050019gilbergtransrp50115forouzannys26825------------------------------------------------------------Script 14.4 The midRaven.scr Script #!/bin/ksh #  Script: midRaven.scr#  Extracts one verse from middle of TheRaven file.head -47 TheRaven | tail +42 > midRaven.txt$ midRaven.scr$ cat midRaven.txtOpen here I flung the shutter, when, with many a flirt and flutterIn there stepped a stately Raven of the saintly days of yore.Not the least obeisance made he; not a minute stopped or stayed he;But, with mien of lord or lady, perched above my chamber door--Perched upon a bust of Pallas just above my chamber door--Perched, and sat, and nothing more.------------------------------------------------------------Script 14.5 The insert.scr Script#!/bin/ksh #  Script: insert.scr#  Inserts lines from one file into anotherhead -5 file4 > file5head -5 file3 | tail +3 >> file5tail +6 file4 >> file5$ insert.scrFile3	File4	File5File 3: line 001	File 4: line 001	File 4: line 001File 3: line 002	File 4: line 002	File 4: line 002File 3: line 003	File 4: line 003	File 4: line 003File 3: line 004	File 4: line 004	File 4: line 004File 3: line 005	File 4: line 005	File 4: line 005File 3: line 006	File 4: line 006	File 3: line 003File 3: line 007	File 4: line 007	File 3: line 004File 3: line 008	File 4: line 008	File 3: line 005File 3: line 009	File 4: line 009	File 4: line 006File 3: line 010	File 4: line 010	File 4: line 007		File 4: line 008		File 4: line 009		File 4: line 010------------------------------------------------------------Script 14.6 The fileExtr.scr Script #!/bin/ksh #  Script: fileExtr.scr#  Extracts $2-$3 lines from $1 and places them in $4head -$3 $1 | tail +$2 > $4$ fileExtr.scr TheRaven 42 47 midRaven.txt$ cat midRaven.txtOpen here I flung the shutter, when, with many a flirt and flutterIn there stepped a stately Raven of the saintly days of yore.Not the least obeisance made he; not a minute stopped or stayed he;But, with mien of lord or lady, perched above my chamber door--Perched upon a bust of Pallas just above my chamber door--Perched, and sat, and nothing more.------------------------------------------------------------Script 14.7 Using a Command #!/bin/ksh#  Script: exit.scr#  Demonstrate use of exit status#  First parameter is user's login idif who | grep $1 > /dev/null                 # put line in trashthen   print "$1 is logged in"else   print "$1 is not logged in"fi$ exit.scr gilbergOutput:gilberg is logged in------------------------------------------------------------Script 14.8 Time of Day Greeting #!/bin/ksh#  Script: gday.scr#  Demonstrate test command evaluationhour=$(date | cut -c 12-13)if (( hour <= 18 ))   then      print Good day, sir   else      print Good evening, sirfi$ gday.scrOutput:Good evening, sir------------------------------------------------------------Script 14.9 Example of if-then with No else #!/bin/ksh#  Script: ifNoElse.scr#  Test existence of a fileif [[ -r $1 ]]then   cat $1fi$ ifNoElse.scr file1Output:*********************               **** This is file1 ****               *********************------------------------------------------------------------Script 14.10 Example of a Null if Command #!/bin/ksh#  Script: ifNull.scr# Ensure argument 1 is valid fileif [[ -r $1 ]]then   :                                # null commandelse   print $1 does not exist and cannot be openedfi#  Rest of script here$ ifNull.scr noFileOutput:noFile does not exist and cannot be opened------------------------------------------------------------Script 14.11 Demonstrate the Case Statement #!/bin/ksh#  Script: caseDigit.scr#  Demonstrate case statementprint "Enter a digit and I'll spell it for you: \c"read digitprint "\nYou entered $digit. It is spelled: \c"case $digit in   0) print Zero.;;   1) print One.;;   2) print Two.;;   3) print Three.;;   4) print Four.;;   5) print Five.;;   6) print Six.;;   7) print Seven.;;   8) print Eight.;;   9) print Nine.;;   *) print Not a digit.;;esac$ caseDigit.scrOutput: First runEnter a digit and I'll spell it for you: 3You entered 3. It is spelled: Three. Output: Second runEnter a digit and I'll spell it for you: xYou entered x. It is spelled: Not a digit. ------------------------------------------------------------Script 14.12 Time and Greeting Script#!/bin/ksh#  Script: greeting.scr#  Check hour to display proper greetinghour=$(date | cut -c 12-16)case $hour in   0?:??|1[01]:??) print "Good morning. It's $hour A.M.";;        1[2-7]:??) print "Good afternoon. It's $hour P.M.";;   1[89]:??|2?:??) print "Good evening. It's $hour P.M.";;                *) print "Sorry, I don't know the time";;esac$ greeting.scrOutput:Good morning. It's 09:24 A.M.------------------------------------------------------------Script 14.13 A Simple Read Loop#!/bin/ksh#  Script: loopAdd.scr#  Demonstrate read file loop. Adds and prints total.print "This utility adds numbers entered from the"print "keyboard. When all numbers have been entered,"print "key ^d (eof) to see the total.\n"sum=0print "Enter a number   :  \c"while read data  do     (( sum = sum + data ))     print "Enter next number:  \c"  doneprint "\n          Sum is: " $sum$ loopAdd.scrOutput:This utility adds numbers entered from thekeyboard. When all numbers have been entered,key ^d (eof) to see the total.Enter a number   :  2Enter next number:  4Enter next number:  6Enter next number:  ^D           Sum is: 12------------------------------------------------------------Script 14.14 Using a Sentinel to Print Totals #!/bin/ksh #  Script: loopSent.scr#  Demonstrate read file loop. Adds and prints total.print This utility adds numbers entered from theprint keyboard. When all numbers have been entered,print key -9999 to see the total.printsum=0print "Enter a number  :  \c"read datawhile [[ $data != -9999 ]]  do     (( sum = sum + data ))     print "Enter next number:  \c"     read data  doneprint "          Sum is: " $sum$ loopSent.scrOutput:This utility adds numbers entered from thekeyboard. When all numbers have been entered,key -9999 to see the total.Enter a number   :  2Enter next number:  4Enter next number:  6Enter next number:  -9999           Sum is: 12------------------------------------------------------------Script 14.15 Demonstrate the until Loop#!/bin/ksh#  Script: until.scr#  Demonstrate until command. Wait for a file to become available.#  File is passed as $1#  Test if file is available.if [[ -r $1 ]]then    :                          # File is available.else   print "File $1 is not available. Waiting\c"   until [[ -r $1 ]]     do        sleep 5        print ". \c"     donefi#  File is available. Continue processing.   print $1 is available for processing.#  Rest of script follows here------------------------------------------------------------Script 14.16 A Simple for-in Loop #!/bin/ksh#  Script: loopFor.scr#  Demonstrate a simple for...in loopfor i in 1 2 3 4 5do   print $i Hellodone$ loopFor.scrOutput:1 Hello2 Hello3 Hello4 Hello5 Hello------------------------------------------------------------Script 14.17 File Processing Loop#!/bin/ksh#  Script: loopCatFiles.scr#  This script catenates files found in a control list#  The name of the control file is an argument ($1)for filename in $(cat $1)do   print $filename   cat   $filename   print "========= End of $filename =========\n"doneprint    "********* End of File List *********"$ loopCatFiles.scr loopCatFiles.dat$ cat loopCatFiles.datfile1file2Output:file1*********************               **** This is file1 ****               *********************========= End of file1 =========file2*********************               **** This is file2 ****               *********************========= End of file2 =========********* End of File List *********------------------------------------------------------------Script 14.18 Basic select Loop #!/bin/ksh#  Script: selectOne.scr#  A simple demonstration of the select loopclearselect choice in month year quitdo   case $choice in          month) cal;;         year)  yr=$(date "+%Y")                cal $yr;;         quit)  print "Hope you found your date"                exit;;         *)     print "Sorry, I don't understand your answer."   esacdone$ selectOne.scrOutput:1) month2) year3) quit#? 1   March 2001 S  M Tu  W Th  F  S             1  2  3 4  5  6  7  8  9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 31#? 4Sorry, I don't understand your answer.#? 3Hope you found your date------------------------------------------------------------Script 14.19 Improved Select Script#!/bin/ksh#  Script: selectTwo.scr#  An improved select loop#  Display introduction messageprint "This script displays a message"print "in the language of your choice"PS3="Enter your selection: "#  Display menu and process responseselect choice in English Spanish French Quitdo    case $choice in       English) print "Thank You";;       Spanish) print "Gracias";;       French)  print "Merci";;       Quit)    break;;       *)       print $REPLY is an invalid choice                print Please try again;;    esacdone$ selectTwo.scrOutput:This script displays a messagein the language of your choice1) English2) Spanish3) French4) QuitEnter your selection: 3MerciEnter your selection: 55 is an invalid choicePlease try againEnter your selection: 4------------------------------------------------------------Script 14.20 Example of a Background Loop #!/bin/ksh#  Script: loopBG.scr#  Loop in background count=1until (( count == 500 ))   do      (( count = $count + 1 ))      print $count >> bgLoop.out   done &$ loopBG.scrExecution:$ tail -3 bgLoop.out103104105$ tail -3 bgLoop.out338339340$ tail -3 bgLoop.out498499500------------------------------------------------------------Script 14.21 Input Redirection !/bin/ksh#  Script: loopIPRedir.scr#  Demonstrate input redirection in a loopwhile read line do    print $line done < TheRavenV1$ loopIPRedir.scrOutputOnce upon a midnight dreary, while I pondered, weak and weary,Over many a quaint and curious volume of forgotten loreWhile I nodded, nearly napping, suddenly there came a tapping,As of someone gently rapping, rapping at my chamber door."'Tis some visitor," I muttered, "tapping at my chamber doorOnly this and nothing more."------------------------------------------------------------Script 14.22 Redirection of Loop Output #!/bin/ksh #  Script: loopRedir.scr#  This script catenates files found in a control list#  The name of the control file is an argument ($1)#  The output is redirected to a file (loopRedir.scr)for filename in $(cat $1)do   print $filename   cat   $filename   print "========= End of $filename =========\n"done > loopRedir.outprint    "********* End of File List *********" > loopRedir.out$ loopRedir.scr loopCatFiles.dat$ cat loopCatFiles.datfile1file2$ cat loopRedir.outfile1*********************               **** This is file1 ****               *********************========= End of file1 =========file2*********************               **** This is file2 ****               *********************========= End of file2 =========********* End of File List *********------------------------------------------------------------Script 14.23. Piping Data into a Loop #!/bin/ksh #  Script: loopInPipe.scr#  This script catenates files found in a file into a do loop#  The name of the file is an argument ($1)cat $1 | while read filenamedo   print $filename   cat   $filename    print "========= End of $filename =========\n"done print    "********* End of File List *********" $ loopInPipe.scr loopCatFiles.dat$ cat loopCatFiles.datfile1file2Output:file1*********************               **** This is file1 ****               *********************========= End of file1 =========file2*********************               **** This is file2 ****               *********************========= End of file2 =========********* End of File List *********------------------------------------------------------------Script 14.24 Pipe Loop Output to wc Utility #!/bin/ksh#  Script: loopOutPipe.scr#  This script counts the number of lines in a file(s).#  The file(s) to be counted are read from a file#  passed as an argument ($1).cat $1 | while read filenamedo    cat $filenamedone | wc -l$ loopOutPipe.scr loopOutPipe.datInput File:file1file2Output:            10------------------------------------------------------------Script 14.25 Name and Number Arguments#!/bin/ksh#  This script displays the $0 and $# special parametersprint "The program name is:" $0print "Number of arguments:" $#$ parmsNameNum.scr 1 2 3 4 5Output:The program name is: parmsNameNum.scrNumber of arguments: 5------------------------------------------------------------Script 14.26 Demonstrate All Parameters without Quotes#!/bin/ksh#  Loops displaying parameter list one element at a timefor parm in $*do   print $parmdone$ parmLoop1.scr Anne "Don Juan" TuanOutput:AnneDonJuanTuan------------------------------------------------------------Script 14.27 String and List Special Parameters #!/bin/ksh#  Demonstrate difference between $* and $@ special parametersprint "The program name is:" $0print "Number of arguments:" $# "\n"print 'Display arguments as a single string ($*): 'i=0for x in "$*"do   (( i = i + 1 ))   print "Loop" i "is:" "$x"doneprint "At end of string loop: i is:" $i "\n"print 'Display arguments as a list ($@): 'i=0for x in "$@"do   (( i = i + 1 ))   print "Loop" $i "is:" "$x"doneprint "At end of list loop: i is:" $i$ parmLoop2.scr One Two "Buckle my shoe"Output:The program name is: parmLoop2.scrNumber of arguments: 3Display arguments as a single string ($*):Loop 1 is: One Two Buckle my shoeAt end of string loop: i is: 1Display arguments as a list ($@):Loop 1 is: OneLoop 2 is: TwoLoop 3 is: Buckle my shoeAt end of list loop: i is: 3------------------------------------------------------------Script 14.28 Demonstrate Use of Internal Field Separator (IFS  ) #!/bin/ksh#  Script: IFS.scr#  Demonstrate IFS codes by printing search results.#  First argument is login id to be locatedIFS=:                         # Set IFS for passwd#  Read and process one line at a time. sk1 etc skip fields#  Find and print login ID and user namewhile read id sk1 sk2 sk3 user sk4do   if [[ $id = $1 ]]      then        print $id belongs to $user        exit 0   fidone </etc/passwd             # redirect inputprint $1 not foundexit 1Execution:$ IFS.scr gilberggilberg belongs to Richard F Gilberg$ print $?0$ IFS.scr gilbertgilbert not found$ print $?1------------------------------------------------------------Script 14.29 Parse Strings Using the set Command #!/bin/ksh#  Script: set.scr#  This script demonstrates the set command.# Only one string: stored in $1print '$1 contains' $1 print '$2 contains' $2 '\n'set "1 2"print After set there are $# parameters.print '$1 contains:' $1print '$2 contains:' $2print# Two strings: stored in $1-$2set 1 2print After set there are $# parameters.print '$1 contains:' $1 print '$2 contains:' $2print '$3 contains:' $3$ set.scr Hello DollyOutput:$1 contains Hello$2 contains DollyAfter set there are 1 parameters.$1 contains: 1 2$2 contains:After set there are 2 parameters.$1 contains: 1$2 contains: 2$3 contains:------------------------------------------------------------Script 14.30 Saving Date for Future Using the set Command #!/bin/ksh#  Script: getDate.scrset $(date)        # assigns date fields to parameters 1..6                   # $1: alpha day (ddd)  $2: alpha month (mmm)                   # $3: day of month     $4: time (hh:mm:ss)                   # $5: time zone        $6: year (yyyy)print "Complete date is:" $*printtoday="$2 $3, $6"print "Today's date is :" $today$ getDate.scrOutput:Complete date is: Thu Jun 16 21:31:09 PDT 2001Today's date is : Jun 16, 2001------------------------------------------------------------Script 14.31 Shift and Print All Parameters #!/bin/ksh# Shift and print all parameters#print "There are" $# "parameters\n"count=0while (( $# > 0 ))do  (( count = count + 1 ))  print "$1 \c"  shiftdoneprint "\n"print "There are now" $# "parameters"print "End of script"$ shiftAll.scr 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15Output:There are 15 parameters1 2 3 4 5 6 7 8 9 10 11 12 13 14 15There are now 0 parametersEnd of script------------------------------------------------------------Script 14.32 Validate Number of Parameters #!/bin/ksh#  Script: arguFixed.scr#  Validate Number of Parametersif (( $# != 3 ))   then      print "This script requires 3 arguments--not" $#"."      print "Usage: arguFixed.scr argu1 argu2 argu3"      exit 1   fiprint "Correct number of parameters"# Rest of script follows hereExecution:$ arguFixed.scr 1 2 3 4This script requires 3 arguments--not 4.Usage: arguFixed.scr argu1 argu2 argu3$ arguFixed.scr 1 2 3Correct number of parameters------------------------------------------------------------Script 14.33 Validation for One or More Parameters #!/bin/ksh#  Script: arguVar.scr#  Validate Minimum Number of Parametersif (( $# < 1 ))   then     print "This script requires 1 or more arguments."     print "Usage: arguVar.scr argu1 [argu2 ...arguN]"     exit 1   fiprint $# "arguments received."# Rest of script follows hereExecution:$ arguVar.scrThis script requires 1 or more arguments.Usage: arguVar.scr argu1 [argu2...arguN]$ arguVar.scr one two three3 arguments received.------------------------------------------------------------Script 14.34 Validate Range#!/bin/ksh#  Script: arguMonth.scr#  This script verifies that the first parameter is numeric and #  the second parameter is a month (1...12).#  Test parameter 1 by adding. All output to trash let x=$1+1 2> /dev/null if [[ $? != 0 ]]               # if exit status is false then    print $1 is not numeric    exit 1                     # exit command kills script fi# Test parameter 2 in range.if (( $2 < 1 ))then   print "Month $2 is less than 1: must be <1...12>"   exit 2                      # exit command kills scriptfiif (( $2 > 12 ))then   print "Month $2 is greater than 12: must be <1...12>"   exit 3                      # exit command kills scriptfi# Rest of script follows here Execution:$ arguMonth.scr 2002 5$ arguMonth.scr 2002 0Month 0 is less than 1: must be <1...12>$ arguMonth.scr 2002 13Month 13 is greater than 12: must be <1...12>------------------------------------------------------------Script 14.35 Validate Input File #!/bin/ksh#  Script: arguFile.scr#  Verify that a $1 is a valid input file.if [[ ! -s "$1" ]]then   print "$1 does not exist or is empty"   exit 1fiif [[ ! -r "$1" ]]then   print "You do not have read permission for $1"   exit 2fi# Rest of script goes here$ arguFile.scr file1Output:$ arguFile.scr noFilenoFile does not exist or is empty$ arguFile.scr agruNoPermFileYou do not have read permission for noPermFile$ arguFile.scr file1$------------------------------------------------------------Script 14.36 Validate Parameter Values#!/bin/ksh#  Script:  argValOther.scr#  Validate Three Parameters -- File Num1 Num2 (Num1 < Num2)if [[ $# != 3 ]]   then     print "This script requires three arguments."     print "Usage: argValOther.scr file num1 num2 [num1 < num2]"     exit 1   fiif [[ ! -f "$1" ]]   then      print "Invalid file name."      print "Usage: argValOther.scr file num1 num2 [num1 < num2]"      exit 2   fiif (( $2 >= $3 ))   then     print $2 "not less than" $3     print "Usage: argValOther.scr file num1 num2 [num1 < num2]"     exit 3   fi# Rest of script follows hereExecution:$ argValOther.scr nofilehereThis script requires three arguments.Usage: argValOther.scr file num1 num2 [num1 < num2]$ argValOther.scr nofilehere 1 6Invalid file name.Usage: argValOther.scr file num1 num2 [num1 < num2]$ argValOther.scr TheRaven 6 16 not less than 1Usage: argValOther.scr file num1 num2 [num1 < num2]------------------------------------------------------------Script 14.37. verbose Debug Option #!/bin/ksh #  Script: debugSetOptV.scr#  Demonstrate debug options set in scriptset -o verbosex=5(( y = x + 2 ))if (( y == 10 ))then   print \$y contains 10else   print \$y contains $y not 10fiwhile (( x != 0 ))do   print Counting down: \$x is $x   (( x = x - 1 )) done$ debugSetOptV.scrOutput:x=5(( y = x + 2 ))if (( y == 10 ))then   print \$y contains 10else   print \$y contains $y not 10fi$y contains 7 not 10while (( x != 0 ))do   print Counting down: \$x is $x   (( x = x - 1 ))doneCounting down: $x is 5Counting down: $x is 4Counting down: $x is 3Counting down: $x is 2Counting down: $x is 1------------------------------------------------------------Script 14.38 Execute xtrace Debug Option#!/bin/ksh #  Script: debugOptions.scr#  Script to demonstrate debug optionsx=5(( y = x + 2 ))if (( y == 10 ))then   print \$y contains 10else   print \$y contains $y not 10fiwhile (( x != 0 ))do   print Counting down: \$x is $x   (( x = x - 1 ))done$ ksh -o xtrace debugOptions.scrOutput:       + x=5+ (( y = x + 2 ))+ (( y == 10 ))+ print $y contains 7 not 10$y contains 7 not 10+ (( x != 0 ))+ print Counting down: $x is 5Counting down: $x is 5+ (( x = x - 1 ))+ (( y != 0 ))+ print Counting down: $x is 4Counting down: $x is 4+ (( x = x - 1 ))+ (( x != 0 ))+ print Counting down: $x is 3Counting down: $x is 3+ (( x = x - 1 ))+ (( x != 0 ))+ print Counting down: $x is 2Counting down: $x is 2+ (( x = x - 1 ))+ (( x != 0 ))+ print Counting down: $x is 1Counting down: $x is 1+ (( x = x - 1 ))+ (( x != 0 ))------------------------------------------------------------Script 14.39 Verbose and Trace Options Combined$ ksh -o xtrace -o verbose debugOptions.scr   Output:x=5+ x=5(( y = x + 2 ))+ (( y = x + 2 ))if (( y == 10 ))then   print \$y contains 10else   print \$y contains $y not 10fi+ (( y == 10 ))+ print $y contains 7 not 10$y contains 7 not 10while (( x != 0 ))do   print counting down: \$x is $x   (( x = x -1 ))done+ (( x != 0 ))+ print counting down: $x is 5counting down: $x is 5+ (( x = x -1 ))+ (( x != 0 ))+ print counting down: $x is 4counting down: $x is 4+ (( x = x -1 ))+ (( x != 0 ))+ print counting down: $x is 3counting down: $x is 3+ (( x = x -1 ))+ (( x != 0 ))+ print counting down: $x is 2counting down: $x is 2+ (( x = x -1 ))+ (( x != 0 ))+ print counting down: $x is 1counting down: $x is 1+ (( x = x -1 ))+ (( x != 0 ))------------------------------------------------------------Script 14.40 Cat File Script #!/bin/ksh #NAME:         newCat.scr#TASK:         Concatenate files in sequence#AUTHOR:#DATE WRITTEN:#SYNOPSIS:     newCat.scr file1 file2...#DESCRIPTION:  Reads files line by line and displays them#EXIT VALUE#              0     if successfully completed#              1     if zero numbers of arguments#              2     if one or more files do not exist# ======================================================print "\c" > errFileexitStatus=0if (( $# == 0 ))then   print "At least one argument is needed" >> errFile   print "Usage: newCat.scr file1 [file2 ... fileN]" >> errFile   exitStatus=1fifor x in $*do    if [[ ! -r "$1" ]]    then        print "Cannot read file $1" >> errFile        exitStatus=2    else        while read LINE        do            print "$LINE"        done < "$1"    fi    shiftdonewhile read errMsgdo   print "$errMsg"done < errFileexit $exitStatus$ newCat.scrAt least one argument is neededUsage: newCat.scr file1 [file2 ... fileN]$ print $?1$ newCat.scr nofileCannot read file nofile$ print $?2$ newCat.scr file1 file2*********************               **** This is file1 ****               ******************************************               **** This is file2 ****               *********************$ print $?0------------------------------------------------------------Script 14.41 Copy Script File #!/bin/ksh#NAME: newCopy.scr#TASK: Copy a file into another#AUTHOR:#DATE WRITTEN: #SYNOPSIS:    newCopy.scr file1 file2#DESCRIPTION: Copies files using the cat command#EXIT VALUE#          0     if successfully completed#          1     if wrong number of arguments#          2     if the source file does not exist#          3     if the destination file already exists# ======================================================if (( $# != 2 ))   then      print "Requires two file arguments"      print "Usage: newCopy.scr from_file to_file"      exit 1fiif [[ ! -r $1 ]]   then      print "The first file cannot be read"      exit 2fiif [[ -f $2 ]]   then      print "The second file already exists"      exit 3ficat $1 > $2$ newCopy.scrRequires two file argumentsUsage: newCopy.scr from_file to_file$ print $?1$ newCopy.scr noFile file1.bakThe first file cannot be read$ print $?2$ newCopy.scr file1 file1.bak$ print $?0$ cat file1.bak*********************               **** This is file1 ****               *********************$ newCopy.scr file1 file1.bakThe second file already exists$ print $?3