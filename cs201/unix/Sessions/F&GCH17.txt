Sessions forUNIX and Shell ProgrammingA TextbookBehrouz A. Forouzan and Richard F. GilbergBrooks/Cole Publishing( ISBN 0 534-95159-7)COPYRIGHT (c) 2003 the Wadsworth Group. Brooks/Cole is an imprint of the Wadsworth Group, a division of Thomson Learning, Inc. Thomson Learning(tm) is a trademark used herein under license.============================================================Chapter 17------------------------------------------------------------Session 17.1 Adding to a String % set count = 5% set count=$count+2% echo $count5+2------------------------------------------------------------Session 17.2  Mathematical Expression Operators % set operand1 = 15% set operand2 = 6% @ result = $operand1 * $operand2% echo $result90------------------------------------------------------------Session 17.3 Using an Expression to Add % set count = 5% @ count += 2% echo $count7------------------------------------------------------------Script 17.1. Recommended Minimum Documentation #!/bin/csh                   # C shell path name#  Script: doc.scr#  This script demonstrates our recommended minimum documentation.# Commands start here------------------------------------------------------------Script 17.2 The dir.scr Script#!/bin/csh #  Script: dir.scr#  A simple scriptls -l | more% dir.scr                      # Command ExecutionOutput:total 8-rw-r--r--    1 gilberg  staff        0 Jun  5 16:56 5-rw-r--r--    1 gilberg  staff        0 Jun  6 14:10 =-rw-------    1 gilberg  staff     5782 Jun  4 12:55 TheRaven-rw-r--r--    1 gilberg  staff      330 Jun  4 13:04 TheRavenV1-rwxr--r--    1 gilberg  staff       13 Jun 11 13:52 dirScript-rw-r--r--    1 gilberg  staff        0 Jun 10 11:26 echo-rw-r--r--    1 gilberg  staff      100 Jun  3 09:00 file1-rw-r--r--    1 gilberg  staff      100 Jun  3 08:56 file2------------------------------------------------------------Script 17.3 The who.scr Script #!/bin/csh #  Script: who.scr#  Displays users currently logged in.who | awk '{print $argv[1]}'% who.scrOutput:st050019gilbergtransrp50115forouzannys26825------------------------------------------------------------Script 17.4 The midRaven.scr Script #!/bin/csh #  Script: midRaven.scr#  Extracts one verse from middle of TheRaven file.head -47 TheRaven | tail +42 > midRaven.txt% midRaven.scr% cat midRaven.txtOpen here I flung the shutter, when, with many a flirt and flutterIn there stepped a stately Raven of the saintly days of yore.Not the least obeisance made he; not a minute stopped or stayed he;But, with mien of lord or lady, perched above my chamber door--Perched upon a bust of Pallas just above my chamber door--Perched, and sat, and nothing more.------------------------------------------------------------Script 17.5 The insert.scr Script#!/bin/csh#  Script: insert.scr#  Inserts lines from one file into anotherhead -5 file4 > file5head -5 file3 | tail +3 >> file5tail +6 file4 >> file5% insert.scrFile3File 3: line 001File 3: line 002File 3: line 003File 3: line 004File 3: line 005File 3: line 006File 3: line 007File 3: line 008File 3: line 009File 3: line 010File4File 4: line 001File 4: line 002File 4: line 003File 4: line 004File 4: line 005File 4: line 006File 4: line 007File 4: line 008File 4: line 009File 4: line 010File5File 4: line 001File 4: line 002File 4: line 003File 4: line 004File 4: line 005File 3: line 003File 3: line 004File 3: line 005File 4: line 006File 4: line 007File 4: line 008File 4: line 009File 4: line 010------------------------------------------------------------Script 17.6 The fileExtr.scr Script #!/bin/csh #  Script: fileExtr.scr#  Extracts $argv[2]-$argv[3] lines from $argv[1] #  and places them in $argv[4]head -$argv[3] $argv[1] | tail +$argv[2] > $argv[4]% fileExtr.scr TheRaven 42 47 midRaven.txt% cat midRaven.txtOpen here I flung the shutter, when, with many a flirt and flutterIn there stepped a stately Raven of the saintly days of yore.Not the least obeisance made he; not a minute stopped or stayed he;But, with mien of lord or lady, perched above my chamber door--Perched upon a bust of Pallas just above my chamber door--Perched, and sat, and nothing more.------------------------------------------------------------Script 17.7 Time of Day Greeting#!/bin/csh#  Script: gday.scr#  Demonstrate test command evaluationset hour = `date | cut -c 12-13`if ($hour <= 18) then    echo Good day, sirelse    echo Good evening, sirendif% gday.scrOutput:Good day, sir------------------------------------------------------------Script 17.8 Using a Command #!/bin/csh#  Script: exit.scr#  Demonstrate use of exit status#  First parameter is user's login idwho | grep $argv[1] > /dev/null            # puts line in trashif ($status == 0) then   echo $argv[1] 'is logged in'else   echo $argv[1] 'is not logged in'endif% exit.scr gilbergOutput:gilberg is logged in------------------------------------------------------------Script 17.9 Example of if-then with No else #!/bin/csh#  Script: ifNoElse.scr#  Test existence of a fileif (-e $argv[1]) then   cat $argv[1]endif% ifNoElse.scr file1Output:*********************               **** This is file1 ****               *********************------------------------------------------------------------Script 17.10 Example of a Null if Command #!/bin/csh#  Script: ifNull.scr# Ensure argument 1 is valid fileif (-e $argv[1]) then  :else   echo $argv[1] does not exist and cannot be openedendif#  Rest of script here$ ifNull.scr noFileOutput:noFile does not exist and cannot be opened------------------------------------------------------------Script 17.11 Demonstrate switch Flow #!/bin/csh/#  Script: default.scr#  Demonstrate case default operation.echo "Enter a character:  \c"set char = $<switch ($char)   case A:             echo You entered $char   case B:             echo You entered $char   default:             echo You did not enter A or B.endsw% default.scrOutput:Enter a character:  AYou entered AYou entered AYou did not enter A or B.------------------------------------------------------------Script 17.12 Demonstrate the switch Statement #!/bin/csh#  Script: switchDigit.scr#  Demonstrate switch statementecho -n "Enter a digit and I'll spell it for you: "set digit = $<echo -n "\nYou entered $digit. It is spelled "switch ($digit)   case 0:            echo Zero.            breaksw   case 1:            echo One.            breaksw   case 2:            echo Two.            breaksw   case 3:            echo Three.            breaksw   case 4:            echo Four.            breaksw   case 5:            echo Five.            breaksw   case 6:            echo Six.            breaksw   case 7:            echo Seven.            breaksw   case 8:            echo Eight.            breaksw   case 9:            echo Nine.            breaksw   default:            echo Not a digit.            breakswendsw$ switchDigit.scrOutput:Enter a digit and I'll spell it for you: 1You entered 1. It is spelled One.------------------------------------------------------------Script 17.13 A Simple Read Loop #!/bin/csh #  loopAdd.scr#  Loops adding data until endecho This script adds numbers. Enter your numbers at the prompt.echo When you are done, key return without a value or key ^dset sum = 0echo -n "Enter a number:        "set num = $<while ($num != "")     @ sum += $num     echo -n "Enter the next number: "     set num = $<endecho "\nThe sum of the numbers is: $sum"% loopAdd.scrOutput:This script adds numbers. Enter your numbers at the prompt.When you are done, key return without a value or key ^dEnter a number:        2Enter the next number: 4Enter the next number: 6Enter the next number: ^DThe sum of the numbers is: 12------------------------------------------------------------Script 17.14 Using a Sentinel to Print Sum #!/bin/csh -f#  Script: loopSent.scr#  Demonstrates read file with sentinelecho This script adds numbers. Enter your numbers at the prompt.echo When you are done, key -9999set sum = 0echo -n "Enter a number:        "set num = $<while ($num != -9999)     @ sum += $num     echo -n "Enter the next number: "     set num = $<endecho "The sum of the numbers is: $sum"% loopSent.scrOutput:This script adds numbers. Enter your numbers at the prompt.When you are done, key -9999Enter a number:        2Enter the next number: 4Enter the next number: 6Enter the next number: -9999The sum of the numbers is: 12------------------------------------------------------------Script 17.15 A Simple foreach Loop #!/bin/csh#  Script: loopForeach.scr#  Demonstrate a simple foreach loopforeach i (1 2 3 4 5)   echo $i Helloend% loopForeach.scrOutput:1 Hello2 Hello3 Hello4 Hello5 Hello------------------------------------------------------------Script 17.16 File Processing Loop#!/bin/csh#  Script: loopCatFiles.scr#  This script catenates files found in a control list#  The name of the control file is an argument ($argv[1])foreach filename (`cat $argv[1]`)   echo $filename   cat  $filename   echo "========= End of $filename =========\n"endecho    "********* End of File List *********"% loopCatFiles.scr loopCatFiles.datcat loopCatFiles.datfile1file2Output:file1*********************               **** This is file1 ****               *********************========= End of file1 =========file2*********************               **** This is file2 ****               *********************========= End of file2 =========********* End of File List *********------------------------------------------------------------Script 17.17 Demonstrate repeat Command#!/bin/csh/ -f#  Script: loopRepeat.scr#  Demonstrate repeat commandset looper = 5repeat $looper echo Hello% loopRepeat.scrOutput:HelloHelloHelloHelloHello------------------------------------------------------------Script 17.18 Demonstrate goto Command#!/bin/csh#  Script: goto.scr#  Demonstrate the goto command#  We recommend that the goto not be used.echo Start of demonstration.goto pointecho Not executed.point: echo Now at point.% goto.scrOutput:Start of demonstration.Now at point.------------------------------------------------------------Script 17.19 Name and Number of Arguments#!/bin/csh#  Script: parmsNameNum.scr#  This script displays the $0 and $# special parametersecho "The program name is:" $0echo "Number of arguments:" $#argv% parmsNameNum.scr 1 2 3 4 5Output:The program name is: parmsNameNum.scrNumber of arguments: 5------------------------------------------------------------Script 17.20 Demonstrate All Parameters without Quotes #!/bin/csh#  Script: parmLoop1.scr#  Loops displaying parameter list one element at a timeforeach parm in ($argv)   echo $parmend% parmLoop1.scr Anne "Don Juan" TuanOutput:AnneDonJuanTuan------------------------------------------------------------Script 17.21 Parse Strings Using the set Command #!/bin/csh#  Script: set.scr#  This script demonstrates the set command.# Only one string: stored in $argv[1]echo '$argv[1] contains' $argv[1] echo '$argv[2] contains' $argv[2] '\n'set argv = ("1 2")echo After set there are $#argv parameters.echo '$argv[1] contains:' $argv[1]echo# Two strings: stored in $argv[1]-$argv[2]set argv = (1 2)echo After set there are $#argv parameters.echo '$argv[1] contains:' $argv[1] echo '$argv[2] contains:' $argv[2]% set.scr Hello DollyOutput:$argv[1] contains Hello$argv[2] contains DollyAfter set there are 1 parameters.$argv[1] contains: 1 2After set there are 2 parameters.$argv[1] contains: 1$argv[2] contains: 2------------------------------------------------------------Script 17.22 Saving Date for Future Using the set Command #!/bin/csh #  Script: getDate.scr#  assigns date fields to parameters 1..6set argv = (`date`)     # $argv[1]: alpha day (ddd)  $argv[2]: alpha month (mmm)     # $argv[3]: day of month     $argv[4]: time (hh:mm:ss)     # $argv[5]: time zone        $argv[6]: year (yyyy)echo "Complete date is:" $argvechoset today = "$argv[2] $argv[3], $argv[6]"echo "Today's date is :" $today% getDate.scrOutput:Complete date is: Thu Jun 16 21:31:09 PDT 2001Today's date is : Jun 16, 2001------------------------------------------------------------Script 17.23 Shift and Print All Parameters #!/bin/csh -f#  Script: shiftAll.scr#  Shift and print all parametersecho "There are" $#argv "parameters\n"while ($#argv > 0)   echo -n "$argv[1] "   shiftendecho "\n"echo "There are now" $#argv "parameters"echo "End of script"% shiftAll.scr 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15Output:There are 15 parameters1 2 3 4 5 6 7 8 9 10 11 12 13 14 15There are now 0 parametersEnd of script------------------------------------------------------------Script 17.24 Validate Number of Parameters #!/bin/csh#  Script: arguFixed.scr#  Validate Number of Parametersif ($#argv != 3) then     echo "This script requires 3 arguments--not" $#argv"."     echo "Usage: $0 argv1 argv2 argv3"     exit 1endifecho "Correct number of parameters"# Rest of script follows hereExecution:% arguFixed.scr 1 2 3 4This script requires 3 arguments--not 4.Usage: argvFixed.scr argv1 argv2 argv3% arguFixed.scr 1 2 3Correct number of parameters------------------------------------------------------------Script 17.25 Validation for One or More Parameters#!/bin/csh#  Script: arguVar.scr#  Validate Minimum Number of Parametersif ($#argv < 1) then     echo "This script requires 1 or more arguments."     echo "Usage: $0 argu1 [argu2 ...arguN]"     exit 1endifecho $#argv "arguments received."# Rest of script follows hereExecution:% arguVar.scrThis script requires 1 or more arguments.Usage: arguVar.scr argu1 [argu2...arguN]% arguVar.scr one two three3 arguments received.------------------------------------------------------------Script 17.26 Validate Range #!/bin/csh#  Script: arguMonth.scr#  This scripts verifies that the second argument is#  numeric and is between 1 and 12 (a month)# Exit values#      0   Success#      1   Not Numeric#      2   Less than 1#      3   Greater than 12echo $argv[2] > tempgrep '^[0-9]*$' temp > /dev/nullif ( $status != 0 ) then   echo "Month argument is not numeric"   exit 1endifif ( $argv[2] < 1 ) then   echo "Month argument is less than 1: must be <1...12>"   exit 2endifif ( $argv[2] > 12 ) then   echo "Month argument is greater than 12: must be <1...12>"   exit 3endifecho "Validation is OK. We continue."Execution:% arguMonth.scr 2002 8Validation is OK. We continue.% arguMonth.scr 2002 MayMonth argument is not numeric% arguMonth.scr 2002 0Month argument is less than 1: must be <1...12>% arguMonth.scr 2002 13Month argument is greater than 12: must be <1...12>------------------------------------------------------------Script 17.27 Validate Input File#!/bin/csh#  Script: arguFile.scr#  Verify that a $argv[1] is a valid input file.if (! -s "$argv[1]") then   echo "$argv[1] does not exist or is empty"   exit 1endifif (! -r "$argv[1]") then   echo "You do not have read permission for $argv[1]"   exit 2endifExecution:% arguFile.scr noFilenoFile does not exist or is empty% arguFile.scr noPermFileYou do not have read permission for noPermFile% arguFile.scr file1%------------------------------------------------------------Script 17.28 Validate Parameter Values #!/bin/csh#  Script:  argValOther.scr#  Validate Three Parameters -- File Num1 Num2 (Num1 < Num2)if ($#argv != 3) then     echo "This script requires three arguments."     echo "Usage: $0 file num1 num2 [num1 < num2]"     exit 1endifif (! -f "$argv[1]") then      echo "Invalid file name."      echo "Usage: $0 file num1 num2 [num1 < num2]"      exit 2endifif ($argv[2] >= $argv[3])then   echo $argv[2] "not less than" $argv[3]   echo "Usage: $0 file num1 num2 [num1 < num2]"   exit 3endif# Rest of script follows hereExecution:% argValOther.scr nofilehereThis script requires three arguments.Usage: argValOther.scr file num1 num2 [num1 < num2]% argValOther.scr nofilehere 1 6Invalid file name.Usage: argValOther.scr file num1 num2 [num1 < num2]% argValOther.scr TheRaven 6 16 not less than 1Usage: argValOther.scr file num1 num2 [num1 < num2]------------------------------------------------------------Script 17.29 verbose Debug Option#!/bin/csh#  Script: debugSetOptV.scr#  Demonstrate debug options set in scriptset verboseset x = 5@ y = $x + 2if ($y == 10) then   echo \$y contains 10else   echo \$y contains $y not 10endifwhile ($x != 0)   echo Counting down: \$x is $x   @ x = $x - 1end% debugSetOptV.scrOutput:set x = 5@ y = $x + 2if ( $y == 10 ) thenecho \$y contains $y not 10$y contains 7 not 10endifwhile ( $x != 0 )echo Counting down: \$x is $xCounting down: $x is 5@ x = $x - 1end# iterations 2, 3, 4 not shownwhile ( $x != 0 )echo Counting down: \$x is $xCounting down: $x is 1@ x = $x - 1endwhile ( $x != 0 )------------------------------------------------------------Script 17.30 Execute extrace Debug Option#!/bin/csh#  Script: debugOptions.scr#  Script to demonstrate debug optionsset x = 5@ y = $x + 2if ($y == 10) then   echo \$y contains 10else   echo \$y contains $y not 10endifwhile ($x != 0)   echo Counting down: \$x is $x   @ x = $x - 1end% csh -x debugOptions.scrOutput:set x = 5@ y = 5 + 2if ( 7 == 10) thenecho $y contains 7 not 10$y contains 7 not 10endifwhile ( 5 != 0 )echo Counting down: $x is 5Counting down: $x is 5@ x = 5 - 1endwhile ( 4 != 0 )echo Counting down: $x is 4Counting down: $x is 4@ x = 4 - 1endwhile ( 3 != 0 )echo Counting down: $x is 3Counting down: $x is 3@ x = 3 - 1endwhile ( 2 != 0 )echo Counting down: $x is 2Counting down: $x is 2@ x = 2 - 1endwhile ( 1 != 0)echo Counting down: $x is 1Counting down: $x is 1@ x = 1 - 1endwhile ( 0 != 0 )------------------------------------------------------------Script 17.31 verbose and xtrace Options Combined % csh -x -v debugOptions.scrset x = 5set x = 5@ y = $x + 2@ y = 5 + 2if ( $y == 10 ) thenif ( 7 == 10 ) thenecho \$y contains $y not 10echo $y contains 7 not 10$y contains 7 not 10endifendifwhile ( $x != 0 )while ( 5 != 0 )echo Counting down: \$x is $xecho Counting down: $x is 5Counting down: $x is 5@ x = $x - 1@ x = 5 - 1endendwhile ( $x != 0 )while ( 4 != 0 )echo Counting down: \$x is $xecho Counting down: $x is 4Counting down: $x is 4@ x = $x - 1@ x = 4 - 1endendwhile ( $x != 0 )while ( 3 != 0 )echo Counting down: \$x is $xecho Counting down: $x is 3Counting down: $x is 3@ x = $x - 1@ x = 3 - 1endendwhile ( $x != 0 )while ( 2 != 0 )echo Counting down: \$x is $xecho Counting down: $x is 2Counting down: $x is 2@ x = $x - 1@ x = 2 - 1endendwhile ( $x != 0 )while ( 1 != 0 )echo Counting down: \$x is $xecho Counting down: $x is 1Counting down: $x is 1@ x = $x - 1@ x = 1 - 1endendwhile ( $x != 0 )while ( 0 != 0 )------------------------------------------------------------Script 17.32 Copy Script File #!/bin/csh#NAME: newCopy.scr#TASK: Copy a file into another#AUTHOR:#DATE WRITTEN: #SYNOPSIS:    newCopy.scr file1 file2#DESCRIPTION: Copies files using the cat command#EXIT VALUE#          0     if successfully completed#          1     if wrong number of arguments#          2     if the source file does not exist#          3     if the destination file already exists# ======================================================if ($#argv != 2) then      echo "Requires two file arguments"      echo "Usage: $0 from_file to_file"      exit 1endifif (! -r $argv[1]) then      echo "The first file cannot be read"      exit 2endifif (-f $argv[2]) then      echo "The second file already exists"      exit 3endifcat $argv[1] > $argv[2]% newCopy.scrRequires two file argumentsUsage: newCopy.scr from_file to_file% echo $status1% newCopy.scr noFile file1.bakThe first file cannot be read% echo $status2% newCopy.scr file1 file1.bak% echo $status0% cat file1.bak*********************               **** This is file1 ****               *********************% newCopy.scr file1 file1.bakThe second file already exists% echo $status3