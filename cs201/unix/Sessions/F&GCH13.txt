Sessions forUNIX and Shell ProgrammingA TextbookBehrouz A. Forouzan and Richard F. GilbergBrooks/Cole Publishing( ISBN 0 534-95159-7)COPYRIGHT (c) 2003 the Wadsworth Group. Brooks/Cole is an imprint of the Wadsworth Group, a division of Thomson Learning, Inc. Thomson Learning(tm) is a trademark used herein under license.============================================================Chapter 13 ------------------------------------------------------------Session 13.1 Sending Output to the tty File$ ls -l | tee /dev/tty | grep '\.scr$' > temp.filetotal 146-rw-r--r--    1 gilberg  staff         42 Jul 10  2000 ErrFile-rwxr--r--    1 gilberg  staff        111 Jul 11  2000 IFS.scr-rw-r--r--    1 gilberg  staff          0 Jun 11  2000 MidRaven. . .-rwxr--r--    1 gilberg  staff         36 Jul 31 13:42 who.scr.bak-rwxr--r--    1 gilberg  staff         36 Jul 31 13:45 who.scrBak-rwxr--r--    1 gilberg  staff        112 Jul  5  2000 xxforLoop.scr$ cat temp.file-rwxr--r--    1 gilberg  staff        111 Jul 11  2000 IFS.scr-rwxr--r--    1 gilberg  staff        925 Jul 10  2000 addCol.scr-rwxr--r--    1 gilberg  staff        129 Jul  7  2000 backup.scr. . .-rwxr--r--    1 gilberg  staff        225 Jun 18  2000 variableNum.scr-rwxr--r--    1 gilberg  staff        171 Jul 29 14:12 whileRead.scr-rwxr--r--    1 gilberg  staff         36 Jul  8  2000 who.scr------------------------------------------------------------Session 13.2 Using Values in Strings  $ count=7$ print $count is the number after 6 and before 87 is the number after 6 and before 8$ print The value of count is $count as expected.The value of count is 7 as expected.$ print My lucky number is $count. My lucky number is 7.------------------------------------------------------------Session 13.3 Assigning One Variable to Another $ count=5$ number=$count$ print count contains: $count; number contains: $numbercount contains: 5; number contains: 5------------------------------------------------------------Session 13.4 Storing a Path in a Variable $ newDir=~/report/letters$ cd $newDir$ pwd/usr/forouzan/report/letters------------------------------------------------------------Session 13.5 Null Variables $ x=1                           #Good assignment$ y=                            #Null assignment$ z=""                          #Another null assignment$ print "(x:" $x ") (y:" $y") (z:" $z")"(x: 1) (y:) (z:)$ x=""                          #Clear 'x' by setting to null$ print "(x contains:" $x")"(x contains: )$ x=1$ print "(x contains:" $x")"(x contains: 1)------------------------------------------------------------Session 13.6 Unsetting Variables $ x=1$ print "(x contains:" $x")"(x contains: 1)$ unset x                       #A better way to clear 'x'$ print "(x contains:" $x")"(x contains: )------------------------------------------------------------Session 13.7 Storing Filenames$ lsfile1      file2      file3.bak$ filename="file*"$ print "filename contains: $filename"           #show contentsfilename contains: file*$ print $filenamefile1      file2      file3.bak$ filename="file?"$ print $filenamefile1      file2------------------------------------------------------------Session 13.8 Storing a File in a String $ cat storeAsVar.txtThis is     a             fileused to showthe result        of storing    a file in a            variable.$ x=$(cat storeAsVar.txt)$ print $xThis is a file used to show the result of storing a file in a variable.------------------------------------------------------------Session 13.9 Executing a Command Variable $ x="ls file*"$ $xfile.scr      file2         file3.bak     file5         fileOut.rptfile1         file2.bak     file4         file6         fileReportfile1bak      file3         file4.bak     fileList.dat------------------------------------------------------------Session 13.10 Creating readonly Constants $ cHello=Hello$ cBye="Good Bye"$ readonly cHello cBye$ cHello=HowdycHello: is read only$ cBye=TaTacBye: is read only$ print $cHello "..." $cByeHello ... Good Bye------------------------------------------------------------Session 13.11 Variables Are Not Automatically Exported $ name=George$ print $nameGeorge$ ksh$ print $name$------------------------------------------------------------Session 13.12 Exporting Names $ name=George$ print $nameGeorge$ export name$ ksh                      # First subshell$ print $nameGeorge$ ksh                      # Second subshell$ print $nameGeorge------------------------------------------------------------Session 13.13 Exported Variables Are Separate Entities $ name=George$ print $nameGeorge$ export name$ ksh                      # Subshell$ print $nameGeorge                    # name exported$ name=Jorge              # name changed$ print $nameJorge$ exit                    # Back to parent$ print $nameGeorge                    # name change lost$ ksh                      # New subshell$ print $nameGeorge                    # Original name exported to new shell------------------------------------------------------------Session 13.14 Demonstrate Use of String Attributes $ str="HELLO WORLD!"$ print $strHELLO WORLD!$ typeset -l str$ print $strhello world!                               # Verify typeset results$ typeset +l str$ print $strhello world!                               # Verify result is permanent$ typeset -L5 str$ print $strhello                                      # Verify left-justify results$ typeset +L5 str$ print $strhello                                      # Verify result is permanent$ str="hello world!"$ typeset -R6 str$ print $strworld!                                     # Verify right-justify results------------------------------------------------------------Session 13.15 Demonstrate Use of Integer Types $ typeset -i num$ print $num                                     # Demonstrate numeric data - no data$ num=124 $ print $num124                                  # Demonstrate numeric data - data$ num=abcksh: abc: bad number$ print $?1                                    # Demonstrate non numeric error$ typeset -RZ10 num$ print \"$num\""0000000124"                         # Demonstrate zero justified$ typeset +RZ10 num$ print \"$num\""0000000124"                         # Demonstrate permanent change$ typeset -LZ10 num$ print $num124                                  # Demonstrate truncate leading zeros------------------------------------------------------------Session 13.16 Demonstrate Use of Integer Arithmetic $ typeset -i x  $ x=12$ x=$x+1$ print $x13                                   # Demonstrate arithmetic add$ num=$x*7$ print $num91                                   # Demonstrate arithmetic multiply$ typeset -i2 x$ print $x2#1101                               # Demonstrate binary format-13$ typeset -i16 num$ print $num16#5b                                # Demonstrate hexadecimal format-91------------------------------------------------------------Session 13.17 Using the print Command $ time=4:30pm$ print "It is now $time"It is now 4:30pm$ print "It is now" $timeIt is now 4:30pm$ print 'It is now $time'It is now $time                   # Error: $time not expanded------------------------------------------------------------Session 13.18 Demonstrate Selected print Codes $ w1=Now$ w2=Time$ print $w1$w2NowTime$ print $w1'\b'$w2NoTime$ print $w1 "\t\t" $w2Now              Time$ print $w1 '\012'$w2              #\012 is octal for newlineNowTime------------------------------------------------------------Session 13.19 Demonstrate read Command $ read word1 word2 word3 Now     is$ print $word1Now$ print $word2is$ print $word3$ read word1 word2 word3 Now     is   the  time  for     all     good    students $ print $word1 $word2 Now is $ print $word3the time for all good students$ print $word1 $word2 $word3 Now is the time for all good students------------------------------------------------------------Session 13.20 Reading a Line into a Word$ read lineNow is the time                 for all good students$ print $lineNow is the time for all good students------------------------------------------------------------Session 13.21 Only the First Line Is Read $ read line1 < TheRaven$ read line2 < TheRaven$ print $line1Once upon a midnight dreary, while I pondered, weak and weary,$ print $line2Once upon a midnight dreary, while I pondered, weak and weary,------------------------------------------------------------Session 13.22 Demonstrate Exit Status $ ls file*file1      file2      file3.bak$ print $?0$ ls noneCannot access none: No such file or directory$ print $?2------------------------------------------------------------Session 13.23 Wrong Way to Use a Variable in a Variable $ x=23$ y=x                  # Store name of variable in y$ print $yx                      # Name of variable, not its value------------------------------------------------------------Session 13.24 Another Wrong Way to Use a Variable in a Variable $ x=23$ y=x                  # Store name of variable in y$ print \$$y $x                     # Still not x's value------------------------------------------------------------Session 13.25 Correct Way to Use a Variable in a Variable $ x=23$ y=x                  # Store name of variable in y$ eval print \$$y23 ------------------------------------------------------------Session 13.26 Variable Command Error $ list="ls -l | head -4"$ $listCannot access |: No such file or directoryCannot access head: No such file or directoryCannot access -4: No such file or directory------------------------------------------------------------Session 13.27 Evaluating a Multicommand Variable $ list="ls -l | head -4"$ eval $listtotal 155-rw-r--r--    1 gilberg  staff         42 Jul 10  2000 ErrFile-rwxr--r--    1 gilberg  staff        111 Jul 11  2000 IFS.scr-rw-r--r--    1 gilberg  staff          0 Jun 11  2000 MidRaven------------------------------------------------------------Session 13.28 Set CDPATH $ CDPATH=:$HOME:/bin/usr/files$ print $CDPATH:/mnt/diska/staff/gilberg:/bin/usr/files------------------------------------------------------------Session 13.29 Demonstrate Change Home Directory $ print $HOME/mnt/diska/staff/gilberg$ oldHOME=$HOME$ print $oldHOME/mnt/diska/staff/gilberg$ HOME=$(pwd)$ print $HOME/mnt/diska/staff/gilberg/unix16korn$ HOME=$oldHOME$ print $HOME/mnt/diska/staff/gilberg------------------------------------------------------------Session 13.30 The LOGNAME Variable $ print $LOGNAMEgilberg------------------------------------------------------------Session 13.31 The MAIL Variable $ print $MAIL/usr/mail/forouzan------------------------------------------------------------Session 13.32 The MAILCHECK Variable $ print $MAILCHECK600------------------------------------------------------------Session 13.33 Change the Primary Prompt $ PS1="Korn: "Korn: print $PS1Korn:Korn: PS1="$ "$------------------------------------------------------------Session 13.34 Directory Prompts $ PS1='$PWD> '                             # Current Directory Prompt/mnt/diska/staff/rfg3988> print $PWD/mnt/diska/staff/rfg3988/mnt/diska/staff/rfg3988> cd ..//mnt/diska/staff> print $PWD/mnt/diska/staff/mnt/diska/staff> PS1="$PWD> "             # Constant prompt/mnt/diska/staff> print $PWD/mnt/diska/staff/mnt/diska/staff> cd ~/mnt/diska/staff> print $PWD/mnt/diska/staff/rfg3988/mnt/diska/staff> cd unix15korn/mnt/diska/staff> print $PWD/mnt/diska/staff/rfg3988/unix15korn/mnt/diska/staff> PS1="$ "$ ------------------------------------------------------------Session 13.35 The Secondary Prompt (PS2) $ print "Now> is> the> time"Nowisthetime------------------------------------------------------------Session 13.36 Demonstrate Use of REPLY Variable $ read This is user input.$ print $REPLYThis is user input.------------------------------------------------------------Session 13.37 The SHELL Variable $ print $SHELL/bin/ksh------------------------------------------------------------Session 13.38 The TERM Variable $ print $TERMvt100------------------------------------------------------------Session 13.39 No Global Option Off$ ls file?file1  file2  file3  file4  file5  file6  file?file1  file2  file3  file4  file5  file6------------------------------------------------------------Session 13.40 No Global Option On$ set -o noglob$ ls file?file?------------------------------------------------------------Session 13.41 Partial Listing of System Profile File $ cat /etc/profile# /etc/profile - Default settings for all ksh users#...# Ignore keyboard interrupts.trap ""  QUIT INT...if [ "${TERM}" = "ansi" ]then        TERM=vt100        export TERMfi------------------------------------------------------------Session 13.42 The history Command $ history238     hold239     history...                                   # commands 240-250 deleted251     cp mail_file mail_file.bak252     pico mail_file253     history------------------------------------------------------------Session 13.43 The history Command without Numbers $ history -n        history        clear...                                   # commands 241-251 deleted        pico mail_file        history        history -n------------------------------------------------------------Session 13.44 Specify Start Line for the history Command $ history 251251     cp mail_file mail_file.bak252     pico mail_file253     history254     history -n255     history 251$ history 1ksh: fc: bad number------------------------------------------------------------Session 13.45 Specify Last n Lines for the history Command $ history -3254     history -n255     history -251256     history 1257     history -3------------------------------------------------------------Session 13.46 Specify Reversed Output for the history Command $ history -4 -r258     history -4 -r257     history -3256     history 1255     history -251254     history -n------------------------------------------------------------Session 13.47 Specify Symbolic Ranges for the history Command $ history ls history240     ls241     clear242     rm mail_file.bak243     history -10$ history mkdirksh: mkdir:  not found------------------------------------------------------------Session 13.48 The Redo Command $ history235     ls f*...                                     # history 236 - 241 deleted242     vi file2243     history$ r 235ls f*file1          file2          file3------------------------------------------------------------Session 13.49 The Relative Redo Command $ r -2vi file2# This command opens file2 in the vi editor.------------------------------------------------------------Session 13.50 Specify Symbolic Command for the Redo Command $ r vvi file2# Once again we are in the vi editor.