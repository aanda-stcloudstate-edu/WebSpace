<HTML>
<HEAD>
    <TITLE>CSCI 201 - Homework Assignment 5: Chapter 5 [A. A. Anda]</TITLE>
</HEAD>
<BODY BGCOLOR=white TEXT=black>
<H3>
  CSCI 201<BR>
  Computer Science 1<BR>
  Fall, 2003<br>
  A. A. Anda<br>
</H3>
<P>
<DIV ALIGN=center>
  <B>Homework Assignment 5: Chapter 5 </b><BR>
</DIV>
<P>
<HR>
<P>
For the following problem which you will solve:
<ol type=I>
    <li>your <b>name</b>, <b>section</b>, <b>course</b>, <b>date</b>, and <b>assignment number</b> will appear as comments at the top of your source code.
    <P>
    <li>the <b>purpose</b> of the program will also appear as comments at the top of your source code.
    <P>
    <li>follow closely the coding style of the text (e.g. programs 2-10 -- 2-13).
    <P>
    <li>compile your code with <tt>g++  -Wall </tt> <i>filename</i><tt>.cpp -o</tt> <i>filename</i> (ensure that there are no compiler warnings or errors)
    <P>
    <li>use <b>script</b> on <i>csci</i> to generate a file which contains the source code followed by a demonstration of the (possibly interactive) running of your program (on good test data). (for each program) You will print out and hand in these three files.
</ol>
<P>
Be neat.
<P>
<HR>
<P>
<h3>Objective:</h3>

This assignment is designed to provide you with experience using selection
statements and modifying an existing program.<br>
You will modify the source code from your previous program, hw4, in which
you approximated sine and cosine.

No <u>loops</u>, or <u>user defined data structures</u> are
necessary. <i>They should <u>not</u>be used</i>, to solve this problem.<br>

<h3>Problem:</h3>

Modify your <b>hw4</b> program to
<ul>
    <li> accept negative angles;
    <li> identify quadrants;
    <li> reduce 2nd-4th quadrant computations to equivalent first quadrant
    computations;
    <li> accept one of several angle reduction factors.
    <ul>
	<li> The accuracy of the approximations should improve with larger factors
    </ul>

</ul>

<h3>Specifications:</h3>

<b>Note:</b> The order of the following procedures must be maintained:<br>
(if you use functions for the following it will unclutter your logic)
<ol>
    <li><tt>&#35;include &lt;stdlib.h&gt;</tt>
    <li> Prompt the user and read in an integer angle reduction factor
	(default = 4) ranging between 1 and 6 inclusive.
    <ul>
	<li> if the angle reduction factor is outside that range,
	print a complaining message to the user and call <tt>exit()</tt>.
    </ul>
    <li> <i>Handle negative angles</i> <br>
	If the input angle is negative:
	<ol>
	    <li> take its absolute value
	    <li> reduce it to the unit circle (&#37;360)
	    <li> subtract it from 360
	</ol>
    <li> <i>Handle special axis angles</i> <br>
    <ul>
	<li> if 0 == angle &#37; 90
	<ul>
	    <li> if 0 == angle
	    <ul>
		<li> sin = 0; cos = 1;
	    </ul>
	    <li> else if 90 == angle
	    <ul>
		<li> sin = 1; cos = 0;
	    </ul>
	    <li> else if 180 == angle
	    <ul>
		<li> sin = 0; cos = -1;
	    </ul>
	    <li> else [<i>if 270 == angle</i>]
	    <ul>
		<li> sin = -1; cos = 0;
	    </ul>
	</ul>
	<li> Print values and call <tt>exit()</tt>.
    </ul>
    <li> <i>Identify and print quadrant with identifying text</i> <br>
    <ul>
	<li> establish transform factors to allow for transformation of<br>
	quadrant II - IV angles to quadrant I:
	<li> e.g.
	<ul>
	    <li><tt>final_sine = sine_Xform_factor * sine</tt>
	    <li><tt>final_cosine = cosine_Xform_factor * cosine</tt>
	</ul>
	<li> <tt>int sine_Xform_factor = 1</tt>
	<li> <tt>int cosine_Xform_factor = 1</tt>
	<li> if not quadrant I
	<ul>
	    <li> if quadrant II
	    <ul>
		<li> (<i>sine unchanged</i>)
		<li> <tt>cosine_Xform_factor *= -1;</tt>
		<li> <tt>angle = 180 - angle;</tt>
	    </ul>
	    <li> else if quadrant III
	    <ul>
		<li> <tt>sine_Xform_factor *= -1;</tt>
		<li> <tt>cosine_Xform_factor *= -1;</tt>
		<li> <tt>angle -= 180;</tt>
	    </ul>
	    <li> else [<i>if quadrant IV</i>]
	    <ul>
		<li> <tt>sine_Xform_factor *= -1;</tt>
		<li> (<i>cosine unchanged</i>)
		<li> <tt>angle = 360 - angle;</tt>
	    </ul>
	</ul>
    </ul>
    <li> <i>Handle special angles</i> <br>
    if special angle (angle == {30, 45, 60})
	<ol> 
	    <li>
	<ul>
	    <li> if 30 == angle
	    <ul>
		<li> <tt>sine = 1.0 / 2;</tt>
		<li> <tt>cosine = sqrt(3.0) / 2;</tt>
	    </ul>
	    <li> else if 45 == angle
	    <ul>
		<li> <tt>sine = sqrt(2.0) / 2;</tt>
		<li> <tt>cosine = sine;</tt>
	    </ul>
	    <li> else if 60 == angle
	    <ul>
		<li> <tt>sine = sqrt(3.0) / 2;</tt>
		<li> <tt>cosine = 1.0 / 2;</tt>
	    </ul>
	</ul>
	    <li> Apply the transform factors
	    <li> Print values and call <tt>exit()</tt>.
	</ol>
    <li> Apply the angle reduction factor
    <li> Compute the 5 term expansion
    <ul>
	<li> <tt>switch( angle_reduction_factor )</tt>
	<dl>
	    <dt><tt><b>case 1:</b></tt><br>
	    <dd> (<i>does nothing</i>)<br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>case 2:</b></tt><br>
	    <dd> <i>sin2x</i> <tt>= 2 * sinx * cosx;</tt><br>
		 <i>cos2x</i> <tt>= 2 * (cosx)^2 - 1;</tt><br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>case 3:</b></tt><br>
	    <dd> <i>sin3x</i><tt> = 3 * sinx - 4 * (sinx)^3; // == sinx * (3 - 4 * (sinx)^2);</tt><br>
	    <i>cos3x </i><tt>= 4 * (cosx)^3 - 3 * cosx; // == cosx * (4 * (cosx)^2 - 3);</tt><br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>case 4:</b></tt><br>
	    <dd> <i>sin4x</i> <tt>= 8 * sinx * (cosx)^3 - 4 * cosx * sinx;</tt><br>
	         <tt>// == 4 * sinx * cosx * ( 2 * (cosx)^2 - 1)</tt><br>
		 <i>cos4x</i> <tt>= 8 * (cosx)^4 - 8 * (cosx)^2 + 1;</tt><br>
	         <tt>// == 8 * (cosx)^2 * ( (cosx)^2 - 1) + 1</tt><br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>case 5:</b></tt><br>
	    <dd> <i>sin5x</i> <tt>= 5 * sinx - 20 * (sinx)^3 + 16 * (sinx)^5;</tt><br>
		 <i>cos5x</i> <tt>= 16 * (cosx)^5 - 20 * (cosx)^3 + 5 * cosx;</tt><br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>case 6:</b></tt><br>
	    <dd> <i>sin6x</i> <tt>= 32 * (cosx)^5 *sinx - 32*(cosx)^3 *sinx + 6*cosx *sinx;</tt><br>
	         <tt>// == sinx * cosx * (32 * (cosx)^2 * ((cosx)^2 -1) + 6)</tt><br>
		 <i>cos6x</i> <tt>= 32 * (cosx)^6 - 48 * (cosx)^4 + 18 * (cosx)^2 - 1;</tt><br>
	         <tt>// == (cosx)^2 * ((cosx)^2 * (32 * (cosx)^2 - 48) + 18) - 1</tt><br>
		<tt><b>break;</b></tt>
	    <dt><tt><b>default:</b></tt><br>
	    <dd> <i>complain to user and call </i><tt>exit()</tt>
	</dl>
    </ul>
</ol>

Document your program in detail!<br>
Document each function with a sentence explaining its purpose followed by
the purpose of each parameter and whether they are <tt>IN</tt>, <tt>OUT</tt>, or <tt>IN/OUT</tt>
respectively.<br>
Specify the <u>precondition</u> (Pre) and <u>postcondition</u> (Post) for each function.

<h3>SUBMIT:</h3>

<ul>
    <li> A listing of your source.
    <li> A copy {using the Unix [script] command} of your programs output
    for the following data values <br>
    (with the default angle reduction factor):<br>
    <u>359</u>, <u>719</u>, <u>-719</u>, <u>1</u>, <u>-720</u>, <u>-120</u>, <u>225</u>.<br>
    Also, for the angle <u>85</u>, show the results of using angle reduction factors of [1,2,3,4,5,6].

</ul>
<HR>
<DIV ALIGN=center>
   All pages should be stapled together.
</DIV>
<HR>
</BODY>
</HTML>

