<HTML>
<HEAD>
    <TITLE>CSCI 201 - Programming Assignment 4 - Spring 2014 A. A. Anda</TITLE>
</HEAD>
<style type="text/css">
    code{font-weight:bolder}
</style>
<BODY BGCOLOR=white TEXT=black>
<H3>
  CSCI 201<BR>
  Computer Science 1<BR>
  Spring, 2014<BR>
  A. A. Anda
</H3>
<P>
<DIV ALIGN=center>
  <B>Programming Assignment 4</B><BR>
</DIV>
<P>
<HR>
<P>
For the following problem you will solve:
<ol type=I>
    <li>At least a day prior to submission of your source code and test script, submit to your D2L dropbox a <u>flowchart</u> for each problem in this assignment.
    <h5>General Documentation </h5>
    <li>your <b>name</b>, <b>course</b>, <b>date</b>, and
	<b>assignment number</b> will appear as <u>comments</u> at the top
	of your source code.<br>
	(<i>Do this before you write any code</i>)</li>
    <li>the <b>purpose</b> of the program will also appear as <u>comments</u>
    at the top of your source code.<br>
    (<i>Do this before you write any code</i>)</li>
    <h5>Module Documentation</h5>
    <li>the purpose of important statements or blocks of statements in the
	source code of your program will be described by <u>comments</u>
	preceding them.<br>
	(<i>Do this before you write any code</i>)</li>
    <h5>Data Names </h5>
    <li>use <i>intelligent</i> <u>data names</u> which match the terminology
    of the user as closely as possible.  This includes substituting descriptive constant identifiers for <i>magic numbers</i></li>
    <P>
    <li>use <u>whitespace</u> and <i>consistent</i> C-style <u>indenting</u> to enhance the
    readability of your code.  In <code>vim</code>:</li>
    <ul>
	<li><code>:set sw=4</code>
	<li><code>:set cindent</code>
    </ul>
    <P>
    <li>compile your code with <br><code>g++  -Wall </code> <i>filename</i><code>.cpp -o</code> <i>filename</i><br>(ensure that there are no compiler warnings or errors)
    <P>
    <li>use <b>script</b> on <i>csci</i> to generate a file which contains
    a (<code>script</code> file) demonstration of the (possibly interactive)
    running of your program (on good test data).
    There should be several runs.<cr>
    To display your source code, create a web page for each source file using
    the Unix command:<br>
    <center>
	<code>enscript -Ecpp --color -W html -p</code><i>file_name</i><code>.cpp.html</code> <i>file_name</i><code>.cpp</code>
    </center>
     You will submit these files to D2L.</li>
</ol>
<P>
Be neat.
<P>
<HR>
<ul>
    <li>For the following project, exploit <u>functions()</u> as much as possible to enhance the modularization of your design.  E.g.: </li>
    <ul>
	<li>write, test, and use a function which swaps two values.</li>
	<li>to make it easy to use your sort functions for both ascending and descending orderings:</li>
	<ol>
	    <li>create a global Boolean flag, <code>isAscendingSort</code> <i>initialized</i> to <code>true</code>.</li>
	    <li>create two functions, <code>void setAscendingSort()</code> &amp; <code>void setDescendingSort()</code>, which
	    sets the <code>isAscendingSort</code> flag to <code>true</code> &amp; <code>false</code> respectively.</li>
	    <li>create a function, <code>bool isOutOfOrder(&lt;<i>type</i>&gt; arg1, &lt;<i>type</i>&gt; arg2)</code>,
	    to compare its two input parameters, which returns <code>true</code> if the values are out-of-order,
	    based on the status of the <code>isAscendingSort</code> flag.</li>
	</ol>
    </ul>
    <li>Your <code>main()</code> function body should consist primarily of declarations, initializations, and function calls.</li>
    <li>Each function should use comments to specify its <u>preconditions</u> &amp; <u>postconditions</u>, and document its <u>parameters</u> (e.g. <code>in</code>, <code>out</code>, or <code>in/out</code>)</li>
    <li>If you pass an array parameter to a function, and you don't intend to modify any of that array's elements, ensure that that array is passed <code>const</code>. (<i>see Gaddis p. 410</i>)</li>
</ul>
<HR>
<P>
<ol>
    <li>Solve Programming Challenge 8.11
    <ul>
	<li>Create an input file of names, <code>names.dat</code>, using the list of names from the code segment on page 488, in that order.
	<li>Write to the file, <code>Selection_sorted_names.dat</code>.
	<li>Include your input and output data file in your D2L submission.
    </ul>
    <li>Copy and modify your
	<a href="http://en.wikipedia.org/wiki/Selection_sort"><i>selection sort</i></a>
	code to perform an
	<a href="http://en.wikipedia.org/wiki/Insertion_sort"><i>insertion sort</i></a>, 
	then repeat Programming Challenge 8.11.
    <li>Copy and modify your
	<a href="http://en.wikipedia.org/wiki/Selection_sort"><i>selection sort</i></a>
	code to shuffle (permute) your data.
    <ul>
	<li>The shuffle will rearrange the ordering of your data.
	<li>In your selection sort code, replace the code which swaps the leftmost unsorted value with the minimum unsorted value.<br>
	Instead, swap the leftmost unshuffled value with a randomly selected value from the entire unshuffled range.<br>
	Be sure to include the leftmost unshuffled value in this range so that there is a small chance that a value is swapped with itself.<br>
	After each swap, the unsorted range will shrink by one element, whereby the index of the leftmost value of the unshuffled range will be incremented.
    </ul>
</ol>
<HR>
Use the following function to compute a <u>random integer</u> in the interval [min, max]:
<pre>
<code>
int irandInterval(int min, int max)
{
    return static_cast&lt;int&gt;( rand() / (RAND_MAX + 1.0) * (max - min + 1) ) + min; // or, with lower quality, rand() % (max - min + 1) + min
}
</code>
</pre>
<HR>
</BODY>
</HTML>

