<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
  <title>Final Review (CSCI 201 Spring 2007) [A. A. Anda]</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
</head>
<body bgcolor="#FFFFFF">
	<div align="center"><h1>Midterm 2 Review</h1></div><br>
	<div align="center"><h2>(CSCI 201 Spring 2007)</h2></div>
	<div align="center"><h3>A. A. Anda</h3></div> <hr>

 <h2>C++</h2>
  <ul>
    <li><h4>(static) Arrays (Chapter 5)</h4>
    <ul>
      <li><u>subscript</u> vs. <u>index</u></li>
      <li>indexing <i>base</i></li>
      <li><u>dimension</u> vs. <u>size</u></li>
      <li><u>declaration</u>, <u>definition</u>, and <u>initialization</u></li>
      <li>element access</li>
      <li><u>passing</u> arrays or array components to functions</li>
      <li><u>frequency</u> array and <u>histogram</u> algorithms on un<u>sorted</u> data</li>
      <li>algorithm for most [<i>mode</i>] (or least) frequently occuring value of <u>sorted</u> data</li>
      <li>sorting algorithms:
	  <ul>
	      <li>selection</li>
	      <li>insertion</li>
	      <li>bubble</li>
	  </ul>
      </li>
      <li>related algorithms:
	  <ul>
	      <li>permutation</li>
	      <li>selection w/o replacement</li>
	  </ul>
      <li>searching:
	      <ul>
	         <li>linear</li>
	         <li>binary</li>
		  <ul>
		     <li>iterative</li>
		     <li>recursive</li>
		  </ul>
	      </ul>
      </li>
      <li><i>multidimensional</i> arrays (and how all of the above relate to them)</li>
      <li>(statistical) <u>mode</u> &amp; <u>median</u> algorithms</li>
    </ul>
    </li>
    <li><h4>Pointers &amp; Dynamic Arrays (Chapter 10)</h4>
    <ul>
      <li>pointer <u>constants</u> and <u>variables</u></li>
      <li>pointer values and computer <i>memory addresses</i></li>
      <li><u>address</u> and <u>indirection</u> (<i>dereference</i>) operators</li>
      <li>pointer <u>declaration</u>, <u>definition</u>, and <u>initialization</u></li>
      <li>pointer <i>flexibility</i></li>
      <li>pointers and functions: as <u>parameters</u> and <u><b>return</b></u> values</li>
      <li>pointer types, casting, levels of indirection, and compatibility</li>
      <li><b>NULL</b> and <b>void</b> pointers</li>
      <li><u>lvalues</u> and <u>rvalues</u> and their uses</li>
      <li>interrelationships between <i>arrays</i> and <i>pointers</i></li>
      <li>interrelationships between <i>multidimensional</i> arrays and pointers</li>
      <li>pointer arithmetic:
	      <ul>
	         <li><u>valid</u> vs. <i>invalid</i> operations </li>
	         <li>implicit <i>offsets</i></li>
	      </ul>
      </li>
      <li>using the <i>right-left</i> rule to understand (<i>disambiguate</i>) complicated
          declarations</li>
      <li><u><i>dynamic</i></u> memory:
          <li><u>allocation</u> and <u>release</u> of memory from the <i>heap</i></li>
          <li><i>ragged</i> arrays</li>
      </li>
      <li><u>frequency array</u> algorithms using</li>
	  <ul>
	      <li>(minimum sized) dynamic arrays</li>
	      <li>pointers</li>
	      <li>non-zero data value minima</li>
	  </ul>
      <li><u>sorting</u> algorithms using pointers</li>
      <li>interrelationships between <u>C-string</u>s and arrays</li>
      <li>parsing, &amp; extracting data from, the <u>command line</u></li>
    </ul>
    <li><h4>streams &amp; file I/O (Chapter 12)</h4>
    <ul>
	<li>formatting</li>
	<li>opening &amp; closing files</li>
	<li>opening to <i>append</i></li>
	<li>detecting &amp; handling file open failures</li>
	<li>byte-wise stream I/O</li>
	<li>random-access</li>
	<li>buffer flushing</li>
    </ul>
    <li><h4>strings (Chapter 9)</h4>
    <ul>
	<li>c-strings <i>vs.</i> string class</li>
	<li>use of the &lt;<tt>cctype</tt>&gt; library</li>
	<li>use of <tt>cin.get</tt></li>
	<li>use of the <tt>getline</tt> function</li>
	<li>concatenation</li>
    </ul>
    <li><h4>structures &amp; classes (Chapter 6)</h4>
    <ul>
	<li>ADT concept</li>
	<li>hierarchical structures &amp; classes</li>
	<li>definition</li>
	<li>initialization</li>
	<li>assignment</li>
	<ul>
	    <li>shallow <i>vs.</i> deep copy</li>
	</ul>
	<li>scoping</li>
	<li>member access operators</li>
	<li>public <i>vs.</i> private members</li>
	<li>interface <i>vs.</i> implementation</li>
	<li>unions</li>
	<li>bitfields</li>
	<li>enums</li>
	<li>typedefs</li>
	<li>accessor &amp; mutator functions</li>
	<li>helper functions</li>
	<li>function overloading</li>
    </ul>
    <li><h4>Divide &amp; conquer sorting pattern (Chapter 20)</h4>
    <ul>
	<li>merge &amp; merge sort</li>
	<li>quicksort</li>
	<li>best &amp; worst performance complexity</li>
	<li>hybrid sorting algorithms (switching to insertion sort for small lists)</li>
    </ul>
    <li><h4>Linked lists and linear data structures (Chapter 17)</h4>
    <ul>
	<li>linked list nodes</li>
	<li>head pointers</li>
	<li>end-of-list markers</li>
	<li>arrow operator</li>
	<li>implementing lists with nodes or arrays</li>
	<li>list:</li>
	<ul>
	    <li>empty state</li>
	    <li>definition</li>
	    <li>search</li>
	    <li>node insertion</li>
	    <li>node deletion</li>
	    <li>applications:</li>
	    <ul>
		<li>stacks</li>
		<ul>
		    <li>push(), pop(), peek(), is_empty()</li>
		</ul>
		<li>queues</li>
		<ul>
		    <li>enqueue(), dequeue(), peek(), is_empty()</li>
		</ul>
		<li>common application of stacks and queues</li>
	    </ul>
	</ul>
    </ul>
    <li><h4>Exception Handling (Chapter 17)</h4>
    <ul>
	<li>try, throw, &amp; catch</li>
	<li>when to use</li>
	<li>exception &neq; error</li>
	<li>listing thrown exceptions in a function header</li>
	<li>what happens if exceptions are uncaught</li>
    </ul>
    
  </ul>
</body>
</html>
