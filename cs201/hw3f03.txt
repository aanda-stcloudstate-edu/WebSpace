CSCI 201 [1,3] Fall 2002

Programming Assignment 3

Objective:

This assignment is designed to provide you with problem solving experience
involving writing a program which includes a wide variety of more
complicated expressions and input & output.
No functions, conditionals, loops, or user defined data structures are
necessary to solve this problem.

Problem:

Design a program which approximates the sine and cosine function for an
arbitrary positive integer degree argument.

Specifications:

The size of the integer argument may be up to the limit for the int type size.
The interactive output will conform to the following example:

____________________________________________________________________________
    CSCI 201 [<sect. # here>]
    Programmer: <your name here>
    Program 2 output
    
    Enter degrees as a non-negative integer

    719

    The exact value of sin(719) is -0.0174524

    The 5 term expansion sine approximation is -0.0175487
    This approximation is within -0.551745% of the true value

    The exact value of cos(719) is 0.999848

    The 5 term expansion cosine approximation is 0.999846
    This approximation is within 0.00016846% of the true value
____________________________________________________________________________

* Use compound assignment expressions whenever possible.

* Use the Unix command [ script -a script_file_name] to generate a copy of
  your I/O from running your program.  (refer to: [man script] for usage
  instructions)

* To get the most accurate value of Pi, first include the <math.h> library.
  Then place the statement:
    const double Pi = 4 * atan(1.0);
  in the global declaration section of your program.
  {atan() is the C++ library function for the inverse tangent.  Can you
   deduce why the above formula yields a representation of Pi?}

* Use double, rather than float, for your floating point variable type.

* Use the following algorithm to compute sine and cosine:

1) Convert degrees to radians:
   {We will divide by 4 to reduce the angle for accuracy.  We'll then
    restore the angle after computing the reduced angle approximation}

   i) reduce degrees to the unit circle ( remainder of dividing degrees by
      360)
   ii) convert to radians divided by 4 ( multiply the above by Pi/720)

   (this value will be the "x" in the following formulae)

2) Use a 5 term series expansion for approximating the angle's sine:
   {"^" indicates power or exponentiation, e.g., x^5 = x*x*x*x*x}
   {"!" indicates factorial, e.g., 5! = 1*2*3*4*5}

   sinx = sin(x) = x - (x^3)/(3!) + (x^5)/(5!) - (x^7)/(7!) + (x^9)/(9!)

3) Use a 5 term series expansion for approximating the angle's cosine:

   cosx = cos(x) = 1 - (x^2)/(2!) + (x^4)/(4!) - (x^6)/(6!) + (x^8)/(8!)

!) {Can you express the above series in a manner such that each term
    is a product of the previous term times another factor?}

4) Compute the approximations to the original angles by using the following
   formulae for 4 times the angle:

   i)  sin4x = sin(4x) = 8 sin(x) cos^3(x) - 4 sin(x) cos(x)

   ii) cos4x = cos(4x) = 1 - 8 cos^2(x) + 8 cos^4(x)

   (use the 5 term expansion values for the cos(x) and sin(x) above)

   {Using factorization, can you write the each of the above formulae using
    fewer operations?}

5) Compute the true Sine and Cosine using the <math.h> library functions:
   trueSine = sin(4 * x), and trueCosine = cos(4 * x).

6) Compute the closeness percentage for each using the following formula:

    approxPercent = 100 * (true - approx)/true 

* Maximize the readability of your program.  Follow the guidelines in
  [Appendix H] unless you can apply a more readable alternative in a
  particular context in your program.

    * Use comments to identify yourself, the date, the course and section, and
      the purpose of the program -- all at the top of your program.
      
    * Use descriptive comments and identifiers throughout your code.

SUBMIT:

* A listing of your source.

* A copy {using the Unix [script] command} of your programs output for the
  following data values: 359, 719, 1, 35641, 35639.
  
