<!doctype html>
<html>

<head>
    <meta charset="UTF-8">
    <title>CSCI 331 &mdash; Spring 2021 &mdash; Group Project &mdash; Zip Code 3.0</title>
    <style>
	code{font-family: courier; font-weight:bold; color:MidnightBlue}
    </style>
</head>

<body>

<div class=Section1>

<h1>CSCI 331 - Software Systems &mdash; Spring 2021</h1>

<h2><u>Zip Code</u> Group Project 3.0</h2> 

<p>
<h2>Objectives and Requirements</h2>
<ol>
    <li>Generate a CSV (comma separated) file from this <a href="http://web.stcloudstate.edu/aanda/cs331/w19/us_postal_codes.xlsx">XLSX file</a>.</li>
    <li>Generate a blocked <b>sequence set</b> file from the CSV file</li>
    <ul>
	<li> Your blocked sequence set generation program's </u>command line</u> options should include:</li>
	<ul>
	    <li>the name of the blocked sequence set data file</li>
	    <li>all other information necessary for the header file</li>
	</ul>
    </ul>
    <li>Process sequentially a blocked <b>sequence set</b> file using a buffer class. {functionality from Group Project 1.0}</li>
    <li><i>Modify</i> your <u>buffer class</u> to <u>read</u> and <u>unpack</u> a Zip Code Record from a sequence set <b>block</b>.</li>
    <li><i>Modify</i> your data file <i>header record</i> <u>buffer class</u> to read and write the blocked sequence set data file header record</li>
    <li><i>Repeat</i> Group Project 1.0 with this new blocked sequence set file.</li>
    <li><i>Create</i> and use a <u>dump</u> method that visibly aggregates Zip Codes into blocks including the RBN pointers.</br>
    <pre>
	RBN  Zip_a Zip_b &hellip; Zip_i RBN <CR>
	RBN  Zip_a Zip_b &hellip; Zip_j RBN <CR>
	&vellip;
	RBN  Zip_a Zip_b &hellip; Zip_k RBN <CR>
    </pre>
    This dump format makes it rather easy to check the results of  insertions and deletions for appropriate changes &mdash; you could even use the <code>diff</code> program.</br>
    It helps to use the smallest possible non-trivial sub-set of the data initially so as to yield a dump which fits on a single page/window.
    
    </li>
    <li>Generate (in RAM), write (as a file), and read (back into RAM), a <u>simple</u> primary key index [Folk Section 10.3] that can be used to display the Zip Code data for all Zip Codes listed on the command line.</li>
    <ul>
	<li> Your blocked sequence set <u>search</u> program's </u>command line</u> options should include the name of the blocked sequence set data file</li>
	<li>Use a command line flag (e.g. <code>-Z56301</code>) to indicate each Zip Code record to search for.</li>
	<li>If the Zip Code record is not in the file, display a message to that effect.</li>
	<li>Test Run Demonstration: for the blocked sequence set Zip Code data and simple index file pair</li>
	<ol>
	    <li>Create and run a <u>search</u> test program - include searches (on the command line) for several valid Zip Codes and at least one invalid Zip Code.</li>
	    <ul>
		<li>the program will load the simple primary key index file into an object in RAM</li>
		<li>the program will <b>never</b> load the blocked sequence set Zip Code data file into RAM</li>
	    </ul>
	    <li>Create and run a <u>record addition and deletion</u> test program</li>
	</ol>
    </ul>
    <li>All program variables and values that can vary should be initialized either by command line parameters (or their defaults) or meta-data in the the data file or index (e.g. header record info.)</li>
    <li>Document (<i>extensively</i>) your C++ source code with comments and Doxygen tags.</li>
    <li>Create a Doxygen PDF of your class and application program code.</li>
    <li>Create a user guide showing how to use your program (including how to use the command line options, and how the output should appear)</li>
</ol>
<hr>
<h3>Header Record Architecture:</h3>
<ul>
    <li>file structure type {blocked sequence set with comma separated fields}</li>
    <li>version of your file structure type (we may add features in subsequent versions)</li>
    <li>header record size</li>
    <li>number of bytes for each record size integer</li>
    <li>size format type {ASCII or binary}</li>
    <li>block size {default to (512B / block)}</li>
    <li>minimum block capacity {default to 50%, except, possibly, the last block}</li>
    <li>index file name
    <li>index file schema information {how to read the index file format}</li>
    <li>record count</i>
    <li>block count</i>
    <li>count of fields per record</li>
    <li>for each field:</li>
    <ul>
	<li>name or ID</li>
	<li>type schema </li>
	<ul>
	    <li>(<i><u>format</u> to read or write</i>)</li>
	</ul>
    </ul>
    <li>indicate (ordinally) which field serves as the primary key</li>
    <li>RBN <u>pointer</u> to the block avail-list {RBN &harr; Relative Block Number}</li>
    <li>RBN <u>pointer</u> to the active sequence set list</li>
    <li>stale flag</li>
</ul>
<h3>Block Architecture:</h3>
Each active block should include the following components:
<ul>
    <li>count of records ( &gt; 0 )</li>
	<li>pointers to preceding &amp; succeeding active blocks</li>
	<li>set of records ordered by key</li>
    </ul>
    <li> Each avail block should include the following components:</li>
    <ul>
	<li>count of records ( == 0 )</li>
	<li>pointer to succeeding avail block</li>
    </ul>
</ul>
<hr>
<h2>WHAT TO TURN IN:</h2>
	<ul>
	    <li>the user guide (<code>.txt</code>)</li>
	    <li>the CSV files</li>
	    <li>the <i>length-indicated</i> data files files (<code>.txt</code>)</li>
	    <li>the simple index file (<code>.txt</code>)</li>
	    <li>the Doxygen PDF</li>
	    <li>the <code>.cpp</code> and <code>.h</code> source code files 
	    <li>the script file that was generated to demonstrate the running of the application program.</li>
	    <li>a <u>test document</u> demonstrating the operation of all of your programs
	    <ul>
		<li>generate and use small data files to demonstrate adding and deleting records to the blocked sequence set and its simple index. Show:</li>
		<ul>
		    <li>the adding of a record requiring no block split</li>
		    <li>the adding of a record requiring a block split, and use and updating of the avail list</li>
		    <li>the deletion of a record requiring no block deletion or redistribution</li>
		    <li>the deletion of a record requiring a block redistribution</li>
		    <li>the deletion of a record requiring a block deletion </li>
		</ul>
	    </ul>
	</ul>
	(zip the <code>.cpp</code> source files: {see <a href="https://support.microsoft.com/en-us/help/14200/windows-compress-uncompress-zip-files">https://support.microsoft.com/en-us/help/14200/windows-compress-uncompress-zip-files</a>})<br>



</div>

</body>

</html>
