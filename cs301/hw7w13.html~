<HTML>
<HEAD>
    <TITLE>CSCI 301 - Programming Assignment 7 - Spring 2013 A. A. Anda</TITLE>
    <style>
	P {font-family: "Times New Roman"}
    </style>
</HEAD>
<BODY BGCOLOR=white TEXT=black>
<H3>
  CSCI 301<BR>
  Computer Science 2<BR>
  Spring, 2013<BR>
  A. A. Anda
</H3>
<P>
<DIV ALIGN=center>
  <B>Programming Assignment 7</B><BR>
</DIV>
<P>
<HR>
<P>
<HR>
<h3>Solve Programming Problem {4.5 &amp; 9.7} (a <i>sparse</i> polynomial class based on a list class) including <b><u>overloaded operators</u></b> &amp; <b><u>iterators</u></b></h3>
<P>
<HR>
<P>
<HR>
<h3>A polynomial can be represented as:</h3>
    <i>P</i>(<i>x</i>) =  <i>a<sub>n</sub> x<sup>n</sup></i> + 
    <i>a</i><sub><i>n</i> - 1</sub><i>x</i><sup><i>n</i> - 1</sup> + 
    &#x22EF; +
    <i>a</i><sub>1</sub> <i>x</i> + <i>a</i><sub>0</sub>, &sdot;&ni;&sdot;
    <ul>
	<li><i>a<sub>i</sub></i> &isin; <code>Polynomial_coefficient_type</code>
	<li><i>x</i> &isin; <code>Indeterminate_type</code>
	<li><i>n</i> &isin; <code>Polynomial_index_type</code> (an integer type)
    </ul>
<P>
A <b>sparse</b> polynomial representation is one in which only the non-zero coefficients are explicitly stored and displayed.
<P>
Store and display instances of your sparse polynomial uniquely by having only one term for each index, and by having terms ordered from highest index on the left to lowest index on the right.<br>
If a coefficient has the value 1 or 1.0 exactly, it is omitted from the display, if the index is one, the index is not displayed, and if the index is zero, only the coefficient is displayed.<br>
The carat symbol "^" is used to indicate powers and coefficients are enclosed in parentheses, so, e.g., the polynomial,
<P>
<i>P</i>(<i>x</i>) =  5 <i>x</i><sup>3</sup> + <i>x</i><sup>2</sup> - <i>x</i> - 7, will be displaed as <code>(5)X^3 + X^2 + (-1)X + (-7)</code>
<P>
<ul>
    <li>For this assignment, you may use the STL class &lt;<i>list</i>&gt; as the container for your polynomial, or you may use the <u>linked list</u> from Chapter 9.
    <li>Implement more complicated operators via simpler operators, e.g. multiplication via addition, and subtraction via addition with unary negation.
    <li>Use <u>iterators</u> with your list container.
<ul>
<P>
<u><b>Overload</b></u> the following operators:
<ul>
    <li> <u>unary</u>
    <ul type=circle>
	<li> <code>+</code>
	<li> <code>-</code>
    </ul>
    <li> <u>binary</u>
    <ul type=disc>
	<li> <u>arithmetic</u>
	<ul type=circle>
	    <li> <code>+</code>
	    <li> <code>-</code>
	    <li> <code>*</code>
	    <li> <code>/</code> [<b>Extra credit</b>: yields the <i>quotient</i> for <u>integer</u> coefficients and <u>monic</u> divisors]
	    <li> <code>%</code> [<b>Extra credit</b>: yields the <i>remainder</i> for <u>integer</u> coefficients and <u>monic</u> divisors]
	</ul>
	<li> <u>arithmetic assignment</u>
	<ul type=circle>
	    <li> <code>=</code>
	    <li> <code>+=</code>
	    <li> <code>-=</code>
	    <li> <code>*=</code>
	    <li> <code>/=</code> [<b>Extra credit</b>: yields the <i>quotient</i> for <u>integer</u> coefficients and <u>monic</u> divisors]
	    <li> <code>%=</code> [<b>Extra credit</b>: yields the <i>remainder</i> for <u>integer</u> coefficients and <u>monic</u> divisors]
	</ul>
	<li> <u>logical</u>
	<ul type=circle>
	    <li> <code>==</code>
	    <li> <code>!=</code>
	</ul>
    </ul>
    <li> <u>mixed binary</u>
    <ul type=circle>
	<li> polynomial * scalar 
	<li> scalar * polynomial 
	<li> polynomial *= scalar 
	<li> polynomial(scalar) // evaluate polynomial at a scalar
    </ul>
    <li> <u>stream I/O</u> (see Gaddis 7th ed. Chapter 14)
    <ul type=circle>
	<li> <code>&gt;&gt;</code> // <i>prettyprinting</i> input stream operator
	<li> <code>&lt;&lt;</code> // <i>prettyprinting</i> output stream operator
    </ul>
</ul>
<P>
<HR>

<ul>
    <li>Ensure that your program detects bad, undefined, and out-of-range input errors both on the command line and during execution.  Error messages should go to <u>standard error</u>.
    <li>Focus on the modularity of your design.  Try to maximize <i>cohesion</i> and minimize <i>coupling</i>.
    
    <li> Before the program exits, be sure to release back to the <i>heap</i> all dynamic memory objects.</li>
    <li> Use <code>typedef</code> to establish the types for the exponent, the coefficient and the independent variable.
</ul>

<HR>
For the above problem, please follow these guidelines:
<ol type=I>
    <h5>General Documentation </h5>
    <li>your <b>name</b>, <b>course</b>, <b>date</b>, and
	<b>assignment number</b> will appear as <u>comments</u> at the top
	of your source code.<br>
	(<i>Do this before you write any code</i>)</li>
    <li>the <b>purpose</b> of the program will also appear as <u>comments</u>
    at the top of your source code.<br>
    (<i>Do this before you write any code</i>)</li>
    <h5>Module Documentation</h5>
    <li>the purpose of important statements or blocks of statements in the
	source code of your program will be described by <u>comments</u>
	preceding them.<br>
	(<i>Do this before you write any code</i>)</li>
	<li> Fully document <b>preconditions</b>, <b>invariants</b> and <b>postconditions</b> 
    <h5>Data Names </h5>
    <li>use <i>intelligent</i> <u>data names</u> which match the terminology
    of the user as closely as possible.</li>
    <P>
    <li>use <u>whitespace</u> and <i>consistent</i> C-style <u>indenting</u> to enhance the
    readability of your code.  In vim:</li>
    <ul>
	<li><tt>:set sw=4</tt>
	<li><tt>:set cindent</tt>
    </ul>
    <P>
    <li>compile your code with <br><tt>g++  -Wall </tt> <i>filename</i><tt>.cpp -o</tt> <i>filename</i><br>(ensure that there are no compiler warnings or errors)
    <P>
    <li>use <b>script</b> on <i>csci</i> to generate a file which contains
    a (<tt>script</tt> file) demonstration of the (possibly interactive)
    running of your program (on good test data).<br>
    There should be several runs.<br>
    Test with <b><code>double</code></b> type coefficients with an <b><code>integer</code></b> type indeterminate (variable) and also
	test with <b><code>integer</code></b> type coefficients with an <b><code>double</code></b> type indeterminate (variable).
    <li>follow the guidelines in <a href="http://web.stcloudstate.edu/bajulstrom/cs301/handin.html">What to hand in</a>.
    <li>use <u>doxygen</u> to help generate your documentation.
    <li>include a PSP <u>time in phase log</u> and a <u>defect recording log</u> for this project.
</ol>
<P>
Be neat.
<P>
<HR>
</BODY>
</HTML>

