<HTML>
    <HEAD>
	<TITLE>CSCI 301 - Programming Assignment 4 - Fall 2012 Dr. A. A. Anda</TITLE>
	<style>
	    P {font-family: "Cambria"}
	</style>
	</HEAD>
    <BODY BGCOLOR=white TEXT=black>
    <H3>
        CSCI 301<BR>
        Computer Science 2<BR>
        Fall, 2012<BR>
        Dr. A. A. Anda
    </H3>
    <P>
    <DIV ALIGN=center>
        <B>Programming Assignment 4</B><BR>
    </DIV>
    <P>
<HR>
<P>
<HR>
<h3> Linked List Exercises and Programming Problems </h3>
<P>
<ol>
    <li>Implement and test the ADT <u>sorted</u> linked list described in Problem 4.<b>2</b> for duplicates allowed and duplicates not allowed.
    <ul>
	<li>Provide methods to get and set the duplicates_allowed flag.  (don't forget to initialize to a default value in the constructors)
	<li>Implement the sorted list methods from pages 133 - 134.
	<li>Ensure that the user is shielded from implementation details in the interface.
	<li>Provide a fully documented specification [.h] file.
	<li>Use Exceptions where applicable.
	<li>Implement the file related save and restore methods from pages 205 - 208.  (These can facilitate testing )
	<li>The copy constructor should be memory-safe as per Exercise 4.24.
    </ul>
    <li>Replicate the above implementation and tests for the ADT <u>sorted</u> <i>integer indexed</i> linked list described in Problem 4.<b>11</b> for duplicates allowed and duplicates not allowed.
    <ul>
	<li>Make the arrays dynamic. (See Problem 4.3) You will need to augment ListA modifying or adding the following methods
	<ul>
	    <li> default constructor 
	    <li> copy constructor 
	    <li> destructor 
	    <li> A doubling method [ bottom of page 181 ] Should this method be <b><tt>private</tt></b>?
	    <li> insert [conditionally uses the doubling method]
	</ul>
	<li>Make the node generic so that there could be multiple columns of <tt>item</tt> and <tt>next</tt>, e.g.
	<pre>
	<tt>
	    struct Inode
	    {
		<b>ListItemType</b>  item; //use <b>typedef</b> to define
		<b>ListIndexType</b> next; //use <b>typedef</b> to define
	    }
	</tt>
	</pre>
    </ul>
<ol>

<P>
For the above sorted linked list ADTs:
<ul>
    <li><u>First</u>, plan and impliment a test driver file for your two ADTs.<br>
	Essentially, the same test code should drive either ADT as all of the public methods should have the same interface<br>
	Ensure that some of your tests exercise exceptional input conditions (e.g. boundaries, special cases, and precondition violations).
    <li>Your header files should include (<i>as comments</i>) all information that the user should require to use your ADT. [use applicable Doxygen tags.  E.g. @pre and @post]<br>
	Include your specification of how input precondition violations will be handled.
    <li>Create an output (text) file to submit by using the Unix <tt>script</tt> command to iteratively display each problem solution in the following order:
    <ol>
	<li> the ADT's header file and implementation file [include the problem ID as a header comment in each function. (e.g. "Carrano Problem 3.2" [chapter#.problem#] )]
	<li> white space
	<li> The test driver output
	<li> horizontal line
	<li> white space
    </ol>
</ul>
<P>
We want these ADTs to be lightweight (but readable), so for each ADT,
<ol>
    <li>include all necessary methods, constructors, and destructors
    <li>include a header comment lines each stating, respectively: 
    <ol>
	<li>the file name (remember to change this if you change the name of the file)
	<li>the relative path to the directory that this file contained in (e.g. <tt>"~cs301###/Assignments/A_3/Problem_3.2/"</tt>)
	<li>the problem ID
	<li>your name, course, semester &amp; year
    </ol>
    <li>have header comments stating what the ADT does
    <li>have a header comment line for each parameter stating its preconditions
    <li>use descriptive identifiers
</ol>
<P>
<P>
<HR>
<P>
<HR>
</BODY>
</HTML>

